//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g 2017-01-05 07:21:15

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  Expressions.VisualBasic 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
 internal  partial class VisualBasicLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int AND=4;
	public const int ANDALSO=5;
	public const int CHARACTER_LITERAL=6;
	public const int CTYPE=7;
	public const int DATETIME_LITERAL=8;
	public const int DECIMAL_LITERAL=9;
	public const int DIRECTCAST=10;
	public const int DOT=11;
	public const int Digits=12;
	public const int Exponent=13;
	public const int FALSE=14;
	public const int FLOATING_POINT_LITERAL=15;
	public const int FloatTypeSuffix=16;
	public const int HEX_LITERAL=17;
	public const int HexDigit=18;
	public const int IDENTIFIER=19;
	public const int IIF=20;
	public const int IS=21;
	public const int LETTER=22;
	public const int NOT=23;
	public const int NOTHING=24;
	public const int NumericTypeSuffix=25;
	public const int OR=26;
	public const int ORELSE=27;
	public const int STRING_LITERAL=28;
	public const int TIMESPAN_LITERAL=29;
	public const int TRUE=30;
	public const int WS=31;
	public const int XOR=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;

    // delegates
    // delegators

	public VisualBasicLexer()
	{
		OnCreated();
	}

	public VisualBasicLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public VisualBasicLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__33();
	partial void LeaveRule_T__33();

	// $ANTLR start "T__33"
	[GrammarRule("T__33")]
	private void mT__33()
	{
		EnterRule_T__33();
		EnterRule("T__33", 1);
		TraceIn("T__33", 1);
		try
		{
			int _type = T__33;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:11:7: ( '%' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:11:9: '%'
			{
			DebugLocation(11, 9);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__33", 1);
			LeaveRule("T__33", 1);
			LeaveRule_T__33();
		}
	}
	// $ANTLR end "T__33"

	partial void EnterRule_T__34();
	partial void LeaveRule_T__34();

	// $ANTLR start "T__34"
	[GrammarRule("T__34")]
	private void mT__34()
	{
		EnterRule_T__34();
		EnterRule("T__34", 2);
		TraceIn("T__34", 2);
		try
		{
			int _type = T__34;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:12:7: ( '&' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:12:9: '&'
			{
			DebugLocation(12, 9);
			Match('&'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__34", 2);
			LeaveRule("T__34", 2);
			LeaveRule_T__34();
		}
	}
	// $ANTLR end "T__34"

	partial void EnterRule_T__35();
	partial void LeaveRule_T__35();

	// $ANTLR start "T__35"
	[GrammarRule("T__35")]
	private void mT__35()
	{
		EnterRule_T__35();
		EnterRule("T__35", 3);
		TraceIn("T__35", 3);
		try
		{
			int _type = T__35;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:13:7: ( '(' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:13:9: '('
			{
			DebugLocation(13, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__35", 3);
			LeaveRule("T__35", 3);
			LeaveRule_T__35();
		}
	}
	// $ANTLR end "T__35"

	partial void EnterRule_T__36();
	partial void LeaveRule_T__36();

	// $ANTLR start "T__36"
	[GrammarRule("T__36")]
	private void mT__36()
	{
		EnterRule_T__36();
		EnterRule("T__36", 4);
		TraceIn("T__36", 4);
		try
		{
			int _type = T__36;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:14:7: ( ')' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:14:9: ')'
			{
			DebugLocation(14, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__36", 4);
			LeaveRule("T__36", 4);
			LeaveRule_T__36();
		}
	}
	// $ANTLR end "T__36"

	partial void EnterRule_T__37();
	partial void LeaveRule_T__37();

	// $ANTLR start "T__37"
	[GrammarRule("T__37")]
	private void mT__37()
	{
		EnterRule_T__37();
		EnterRule("T__37", 5);
		TraceIn("T__37", 5);
		try
		{
			int _type = T__37;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:15:7: ( '*' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:15:9: '*'
			{
			DebugLocation(15, 9);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__37", 5);
			LeaveRule("T__37", 5);
			LeaveRule_T__37();
		}
	}
	// $ANTLR end "T__37"

	partial void EnterRule_T__38();
	partial void LeaveRule_T__38();

	// $ANTLR start "T__38"
	[GrammarRule("T__38")]
	private void mT__38()
	{
		EnterRule_T__38();
		EnterRule("T__38", 6);
		TraceIn("T__38", 6);
		try
		{
			int _type = T__38;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:16:7: ( '+' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:16:9: '+'
			{
			DebugLocation(16, 9);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__38", 6);
			LeaveRule("T__38", 6);
			LeaveRule_T__38();
		}
	}
	// $ANTLR end "T__38"

	partial void EnterRule_T__39();
	partial void LeaveRule_T__39();

	// $ANTLR start "T__39"
	[GrammarRule("T__39")]
	private void mT__39()
	{
		EnterRule_T__39();
		EnterRule("T__39", 7);
		TraceIn("T__39", 7);
		try
		{
			int _type = T__39;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:17:7: ( ',' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:17:9: ','
			{
			DebugLocation(17, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__39", 7);
			LeaveRule("T__39", 7);
			LeaveRule_T__39();
		}
	}
	// $ANTLR end "T__39"

	partial void EnterRule_T__40();
	partial void LeaveRule_T__40();

	// $ANTLR start "T__40"
	[GrammarRule("T__40")]
	private void mT__40()
	{
		EnterRule_T__40();
		EnterRule("T__40", 8);
		TraceIn("T__40", 8);
		try
		{
			int _type = T__40;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:18:7: ( '-' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:18:9: '-'
			{
			DebugLocation(18, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__40", 8);
			LeaveRule("T__40", 8);
			LeaveRule_T__40();
		}
	}
	// $ANTLR end "T__40"

	partial void EnterRule_T__41();
	partial void LeaveRule_T__41();

	// $ANTLR start "T__41"
	[GrammarRule("T__41")]
	private void mT__41()
	{
		EnterRule_T__41();
		EnterRule("T__41", 9);
		TraceIn("T__41", 9);
		try
		{
			int _type = T__41;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:19:7: ( '/' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:19:9: '/'
			{
			DebugLocation(19, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__41", 9);
			LeaveRule("T__41", 9);
			LeaveRule_T__41();
		}
	}
	// $ANTLR end "T__41"

	partial void EnterRule_T__42();
	partial void LeaveRule_T__42();

	// $ANTLR start "T__42"
	[GrammarRule("T__42")]
	private void mT__42()
	{
		EnterRule_T__42();
		EnterRule("T__42", 10);
		TraceIn("T__42", 10);
		try
		{
			int _type = T__42;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:20:7: ( '<' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:20:9: '<'
			{
			DebugLocation(20, 9);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__42", 10);
			LeaveRule("T__42", 10);
			LeaveRule_T__42();
		}
	}
	// $ANTLR end "T__42"

	partial void EnterRule_T__43();
	partial void LeaveRule_T__43();

	// $ANTLR start "T__43"
	[GrammarRule("T__43")]
	private void mT__43()
	{
		EnterRule_T__43();
		EnterRule("T__43", 11);
		TraceIn("T__43", 11);
		try
		{
			int _type = T__43;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:21:7: ( '<=' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:21:9: '<='
			{
			DebugLocation(21, 9);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__43", 11);
			LeaveRule("T__43", 11);
			LeaveRule_T__43();
		}
	}
	// $ANTLR end "T__43"

	partial void EnterRule_T__44();
	partial void LeaveRule_T__44();

	// $ANTLR start "T__44"
	[GrammarRule("T__44")]
	private void mT__44()
	{
		EnterRule_T__44();
		EnterRule("T__44", 12);
		TraceIn("T__44", 12);
		try
		{
			int _type = T__44;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:22:7: ( '<>' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:22:9: '<>'
			{
			DebugLocation(22, 9);
			Match("<>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__44", 12);
			LeaveRule("T__44", 12);
			LeaveRule_T__44();
		}
	}
	// $ANTLR end "T__44"

	partial void EnterRule_T__45();
	partial void LeaveRule_T__45();

	// $ANTLR start "T__45"
	[GrammarRule("T__45")]
	private void mT__45()
	{
		EnterRule_T__45();
		EnterRule("T__45", 13);
		TraceIn("T__45", 13);
		try
		{
			int _type = T__45;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:23:7: ( '=' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:23:9: '='
			{
			DebugLocation(23, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__45", 13);
			LeaveRule("T__45", 13);
			LeaveRule_T__45();
		}
	}
	// $ANTLR end "T__45"

	partial void EnterRule_T__46();
	partial void LeaveRule_T__46();

	// $ANTLR start "T__46"
	[GrammarRule("T__46")]
	private void mT__46()
	{
		EnterRule_T__46();
		EnterRule("T__46", 14);
		TraceIn("T__46", 14);
		try
		{
			int _type = T__46;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:24:7: ( '>' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:24:9: '>'
			{
			DebugLocation(24, 9);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__46", 14);
			LeaveRule("T__46", 14);
			LeaveRule_T__46();
		}
	}
	// $ANTLR end "T__46"

	partial void EnterRule_T__47();
	partial void LeaveRule_T__47();

	// $ANTLR start "T__47"
	[GrammarRule("T__47")]
	private void mT__47()
	{
		EnterRule_T__47();
		EnterRule("T__47", 15);
		TraceIn("T__47", 15);
		try
		{
			int _type = T__47;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:25:7: ( '>=' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:25:9: '>='
			{
			DebugLocation(25, 9);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__47", 15);
			LeaveRule("T__47", 15);
			LeaveRule_T__47();
		}
	}
	// $ANTLR end "T__47"

	partial void EnterRule_T__48();
	partial void LeaveRule_T__48();

	// $ANTLR start "T__48"
	[GrammarRule("T__48")]
	private void mT__48()
	{
		EnterRule_T__48();
		EnterRule("T__48", 16);
		TraceIn("T__48", 16);
		try
		{
			int _type = T__48;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:26:7: ( '^' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:26:9: '^'
			{
			DebugLocation(26, 9);
			Match('^'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__48", 16);
			LeaveRule("T__48", 16);
			LeaveRule_T__48();
		}
	}
	// $ANTLR end "T__48"

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 17);
		TraceIn("AND", 17);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:173:2: ( ( 'A' | 'a' ) ( 'N' | 'n' ) ( 'D' | 'd' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:173:4: ( 'A' | 'a' ) ( 'N' | 'n' ) ( 'D' | 'd' )
			{
			DebugLocation(173, 4);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(173, 13);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(173, 22);
			if (input.LA(1)=='D'||input.LA(1)=='d')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 17);
			LeaveRule("AND", 17);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_ANDALSO();
	partial void LeaveRule_ANDALSO();

	// $ANTLR start "ANDALSO"
	[GrammarRule("ANDALSO")]
	private void mANDALSO()
	{
		EnterRule_ANDALSO();
		EnterRule("ANDALSO", 18);
		TraceIn("ANDALSO", 18);
		try
		{
			int _type = ANDALSO;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:177:2: ( ( 'A' | 'a' ) ( 'N' | 'n' ) ( 'D' | 'd' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ( 'S' | 's' ) ( 'O' | 'o' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:177:4: ( 'A' | 'a' ) ( 'N' | 'n' ) ( 'D' | 'd' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ( 'S' | 's' ) ( 'O' | 'o' )
			{
			DebugLocation(177, 4);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(177, 13);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(177, 22);
			if (input.LA(1)=='D'||input.LA(1)=='d')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(177, 31);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(177, 40);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(177, 49);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(177, 58);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ANDALSO", 18);
			LeaveRule("ANDALSO", 18);
			LeaveRule_ANDALSO();
		}
	}
	// $ANTLR end "ANDALSO"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 19);
		TraceIn("OR", 19);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:181:2: ( ( 'O' | 'o' ) ( 'R' | 'r' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:181:4: ( 'O' | 'o' ) ( 'R' | 'r' )
			{
			DebugLocation(181, 4);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(181, 13);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 19);
			LeaveRule("OR", 19);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_ORELSE();
	partial void LeaveRule_ORELSE();

	// $ANTLR start "ORELSE"
	[GrammarRule("ORELSE")]
	private void mORELSE()
	{
		EnterRule_ORELSE();
		EnterRule("ORELSE", 20);
		TraceIn("ORELSE", 20);
		try
		{
			int _type = ORELSE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:185:2: ( ( 'O' | 'o' ) ( 'R' | 'r' ) ( 'E' | 'e' ) ( 'L' | 'l' ) ( 'S' | 's' ) ( 'E' | 'e' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:185:4: ( 'O' | 'o' ) ( 'R' | 'r' ) ( 'E' | 'e' ) ( 'L' | 'l' ) ( 'S' | 's' ) ( 'E' | 'e' )
			{
			DebugLocation(185, 4);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(185, 13);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(185, 22);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(185, 31);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(185, 40);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(185, 49);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ORELSE", 20);
			LeaveRule("ORELSE", 20);
			LeaveRule_ORELSE();
		}
	}
	// $ANTLR end "ORELSE"

	partial void EnterRule_XOR();
	partial void LeaveRule_XOR();

	// $ANTLR start "XOR"
	[GrammarRule("XOR")]
	private void mXOR()
	{
		EnterRule_XOR();
		EnterRule("XOR", 21);
		TraceIn("XOR", 21);
		try
		{
			int _type = XOR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:189:2: ( ( 'X' | 'x' ) ( 'O' | 'o' ) ( 'R' | 'r' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:189:4: ( 'X' | 'x' ) ( 'O' | 'o' ) ( 'R' | 'r' )
			{
			DebugLocation(189, 4);
			if (input.LA(1)=='X'||input.LA(1)=='x')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(189, 13);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(189, 22);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("XOR", 21);
			LeaveRule("XOR", 21);
			LeaveRule_XOR();
		}
	}
	// $ANTLR end "XOR"

	partial void EnterRule_CTYPE();
	partial void LeaveRule_CTYPE();

	// $ANTLR start "CTYPE"
	[GrammarRule("CTYPE")]
	private void mCTYPE()
	{
		EnterRule_CTYPE();
		EnterRule("CTYPE", 22);
		TraceIn("CTYPE", 22);
		try
		{
			int _type = CTYPE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:193:2: ( ( 'C' | 'c' ) ( 'T' | 't' ) ( 'Y' | 'y' ) ( 'P' | 'p' ) ( 'E' | 'e' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:193:4: ( 'C' | 'c' ) ( 'T' | 't' ) ( 'Y' | 'y' ) ( 'P' | 'p' ) ( 'E' | 'e' )
			{
			DebugLocation(193, 4);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(193, 13);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(193, 22);
			if (input.LA(1)=='Y'||input.LA(1)=='y')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(193, 31);
			if (input.LA(1)=='P'||input.LA(1)=='p')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(193, 40);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CTYPE", 22);
			LeaveRule("CTYPE", 22);
			LeaveRule_CTYPE();
		}
	}
	// $ANTLR end "CTYPE"

	partial void EnterRule_DIRECTCAST();
	partial void LeaveRule_DIRECTCAST();

	// $ANTLR start "DIRECTCAST"
	[GrammarRule("DIRECTCAST")]
	private void mDIRECTCAST()
	{
		EnterRule_DIRECTCAST();
		EnterRule("DIRECTCAST", 23);
		TraceIn("DIRECTCAST", 23);
		try
		{
			int _type = DIRECTCAST;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:197:2: ( ( 'D' | 'd' ) ( 'I' | 'i' ) ( 'R' | 'r' ) ( 'E' | 'e' ) ( 'C' | 'c' ) ( 'T' | 't' ) ( 'C' | 'c' ) ( 'A' | 'a' ) ( 'S' | 's' ) ( 'T' | 't' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:197:4: ( 'D' | 'd' ) ( 'I' | 'i' ) ( 'R' | 'r' ) ( 'E' | 'e' ) ( 'C' | 'c' ) ( 'T' | 't' ) ( 'C' | 'c' ) ( 'A' | 'a' ) ( 'S' | 's' ) ( 'T' | 't' )
			{
			DebugLocation(197, 4);
			if (input.LA(1)=='D'||input.LA(1)=='d')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(197, 13);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(197, 22);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(197, 31);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(197, 40);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(197, 49);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(197, 58);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(197, 67);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(197, 76);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(197, 85);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIRECTCAST", 23);
			LeaveRule("DIRECTCAST", 23);
			LeaveRule_DIRECTCAST();
		}
	}
	// $ANTLR end "DIRECTCAST"

	partial void EnterRule_IIF();
	partial void LeaveRule_IIF();

	// $ANTLR start "IIF"
	[GrammarRule("IIF")]
	private void mIIF()
	{
		EnterRule_IIF();
		EnterRule("IIF", 24);
		TraceIn("IIF", 24);
		try
		{
			int _type = IIF;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:201:2: ( ( 'I' | 'i' ) ( 'I' | 'i' ) ( 'F' | 'f' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:201:4: ( 'I' | 'i' ) ( 'I' | 'i' ) ( 'F' | 'f' )
			{
			DebugLocation(201, 4);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(201, 13);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(201, 22);
			if (input.LA(1)=='F'||input.LA(1)=='f')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IIF", 24);
			LeaveRule("IIF", 24);
			LeaveRule_IIF();
		}
	}
	// $ANTLR end "IIF"

	partial void EnterRule_IS();
	partial void LeaveRule_IS();

	// $ANTLR start "IS"
	[GrammarRule("IS")]
	private void mIS()
	{
		EnterRule_IS();
		EnterRule("IS", 25);
		TraceIn("IS", 25);
		try
		{
			int _type = IS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:205:2: ( ( 'I' | 'i' ) ( 'S' | 's' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:205:4: ( 'I' | 'i' ) ( 'S' | 's' )
			{
			DebugLocation(205, 4);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(205, 13);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IS", 25);
			LeaveRule("IS", 25);
			LeaveRule_IS();
		}
	}
	// $ANTLR end "IS"

	partial void EnterRule_NOT();
	partial void LeaveRule_NOT();

	// $ANTLR start "NOT"
	[GrammarRule("NOT")]
	private void mNOT()
	{
		EnterRule_NOT();
		EnterRule("NOT", 26);
		TraceIn("NOT", 26);
		try
		{
			int _type = NOT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:209:2: ( ( 'N' | 'n' ) ( 'O' | 'o' ) ( 'T' | 't' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:209:4: ( 'N' | 'n' ) ( 'O' | 'o' ) ( 'T' | 't' )
			{
			DebugLocation(209, 4);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(209, 13);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(209, 22);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT", 26);
			LeaveRule("NOT", 26);
			LeaveRule_NOT();
		}
	}
	// $ANTLR end "NOT"

	partial void EnterRule_TRUE();
	partial void LeaveRule_TRUE();

	// $ANTLR start "TRUE"
	[GrammarRule("TRUE")]
	private void mTRUE()
	{
		EnterRule_TRUE();
		EnterRule("TRUE", 27);
		TraceIn("TRUE", 27);
		try
		{
			int _type = TRUE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:213:2: ( ( 'T' | 't' ) ( 'R' | 'r' ) ( 'U' | 'u' ) ( 'E' | 'e' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:213:4: ( 'T' | 't' ) ( 'R' | 'r' ) ( 'U' | 'u' ) ( 'E' | 'e' )
			{
			DebugLocation(213, 4);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(213, 13);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(213, 22);
			if (input.LA(1)=='U'||input.LA(1)=='u')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(213, 31);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TRUE", 27);
			LeaveRule("TRUE", 27);
			LeaveRule_TRUE();
		}
	}
	// $ANTLR end "TRUE"

	partial void EnterRule_FALSE();
	partial void LeaveRule_FALSE();

	// $ANTLR start "FALSE"
	[GrammarRule("FALSE")]
	private void mFALSE()
	{
		EnterRule_FALSE();
		EnterRule("FALSE", 28);
		TraceIn("FALSE", 28);
		try
		{
			int _type = FALSE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:217:2: ( ( 'F' | 'f' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ( 'S' | 's' ) ( 'E' | 'e' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:217:4: ( 'F' | 'f' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ( 'S' | 's' ) ( 'E' | 'e' )
			{
			DebugLocation(217, 4);
			if (input.LA(1)=='F'||input.LA(1)=='f')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(217, 13);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(217, 22);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(217, 31);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(217, 40);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FALSE", 28);
			LeaveRule("FALSE", 28);
			LeaveRule_FALSE();
		}
	}
	// $ANTLR end "FALSE"

	partial void EnterRule_NOTHING();
	partial void LeaveRule_NOTHING();

	// $ANTLR start "NOTHING"
	[GrammarRule("NOTHING")]
	private void mNOTHING()
	{
		EnterRule_NOTHING();
		EnterRule("NOTHING", 29);
		TraceIn("NOTHING", 29);
		try
		{
			int _type = NOTHING;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:221:2: ( ( 'N' | 'n' ) ( 'O' | 'o' ) ( 'T' | 't' ) ( 'H' | 'h' ) ( 'I' | 'i' ) ( 'N' | 'n' ) ( 'G' | 'g' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:221:4: ( 'N' | 'n' ) ( 'O' | 'o' ) ( 'T' | 't' ) ( 'H' | 'h' ) ( 'I' | 'i' ) ( 'N' | 'n' ) ( 'G' | 'g' )
			{
			DebugLocation(221, 4);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(221, 13);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(221, 22);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(221, 31);
			if (input.LA(1)=='H'||input.LA(1)=='h')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(221, 40);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(221, 49);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(221, 58);
			if (input.LA(1)=='G'||input.LA(1)=='g')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOTHING", 29);
			LeaveRule("NOTHING", 29);
			LeaveRule_NOTHING();
		}
	}
	// $ANTLR end "NOTHING"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 30);
		TraceIn("DOT", 30);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:225:2: ()
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:226:2: 
			{
			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 30);
			LeaveRule("DOT", 30);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_CHARACTER_LITERAL();
	partial void LeaveRule_CHARACTER_LITERAL();

	// $ANTLR start "CHARACTER_LITERAL"
	[GrammarRule("CHARACTER_LITERAL")]
	private void mCHARACTER_LITERAL()
	{
		EnterRule_CHARACTER_LITERAL();
		EnterRule("CHARACTER_LITERAL", 31);
		TraceIn("CHARACTER_LITERAL", 31);
		try
		{
			int _type = CHARACTER_LITERAL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:229:2: ( '\\'' ~ '\\'' '\\'' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:229:4: '\\'' ~ '\\'' '\\''
			{
			DebugLocation(229, 4);
			Match('\''); 
			DebugLocation(229, 9);
			if ((input.LA(1)>='\u0000' && input.LA(1)<='&')||(input.LA(1)>='(' && input.LA(1)<='\uFFFF'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(229, 15);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHARACTER_LITERAL", 31);
			LeaveRule("CHARACTER_LITERAL", 31);
			LeaveRule_CHARACTER_LITERAL();
		}
	}
	// $ANTLR end "CHARACTER_LITERAL"

	partial void EnterRule_TIMESPAN_LITERAL();
	partial void LeaveRule_TIMESPAN_LITERAL();

	// $ANTLR start "TIMESPAN_LITERAL"
	[GrammarRule("TIMESPAN_LITERAL")]
	private void mTIMESPAN_LITERAL()
	{
		EnterRule_TIMESPAN_LITERAL();
		EnterRule("TIMESPAN_LITERAL", 32);
		TraceIn("TIMESPAN_LITERAL", 32);
		try
		{
			int _type = TIMESPAN_LITERAL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:233:2: ( '#' '#' (~ '#' )* '#' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:233:4: '#' '#' (~ '#' )* '#'
			{
			DebugLocation(233, 4);
			Match('#'); 
			DebugLocation(233, 8);
			Match('#'); 
			DebugLocation(233, 12);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:233:12: (~ '#' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if (((LA1_1>='\u0000' && LA1_1<='\"')||(LA1_1>='$' && LA1_1<='\uFFFF')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:
					{
					DebugLocation(233, 12);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(233, 22);
			Match('#'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TIMESPAN_LITERAL", 32);
			LeaveRule("TIMESPAN_LITERAL", 32);
			LeaveRule_TIMESPAN_LITERAL();
		}
	}
	// $ANTLR end "TIMESPAN_LITERAL"

	partial void EnterRule_DATETIME_LITERAL();
	partial void LeaveRule_DATETIME_LITERAL();

	// $ANTLR start "DATETIME_LITERAL"
	[GrammarRule("DATETIME_LITERAL")]
	private void mDATETIME_LITERAL()
	{
		EnterRule_DATETIME_LITERAL();
		EnterRule("DATETIME_LITERAL", 33);
		TraceIn("DATETIME_LITERAL", 33);
		try
		{
			int _type = DATETIME_LITERAL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:237:2: ( '#' (~ '#' )* '#' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:237:4: '#' (~ '#' )* '#'
			{
			DebugLocation(237, 4);
			Match('#'); 
			DebugLocation(237, 8);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:237:8: (~ '#' )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if (((LA2_1>='\u0000' && LA2_1<='\"')||(LA2_1>='$' && LA2_1<='\uFFFF')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:
					{
					DebugLocation(237, 8);
					input.Consume();


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(237, 18);
			Match('#'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DATETIME_LITERAL", 33);
			LeaveRule("DATETIME_LITERAL", 33);
			LeaveRule_DATETIME_LITERAL();
		}
	}
	// $ANTLR end "DATETIME_LITERAL"

	partial void EnterRule_STRING_LITERAL();
	partial void LeaveRule_STRING_LITERAL();

	// $ANTLR start "STRING_LITERAL"
	[GrammarRule("STRING_LITERAL")]
	private void mSTRING_LITERAL()
	{
		EnterRule_STRING_LITERAL();
		EnterRule("STRING_LITERAL", 34);
		TraceIn("STRING_LITERAL", 34);
		try
		{
			int _type = STRING_LITERAL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:241:2: ( '\"' (~ '\"' | '\"\"' )* '\"' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:241:5: '\"' (~ '\"' | '\"\"' )* '\"'
			{
			DebugLocation(241, 5);
			Match('\"'); 
			DebugLocation(241, 9);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:241:9: (~ '\"' | '\"\"' )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=3;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1=='\"'))
				{
					int LA3_2 = input.LA(2);

					if ((LA3_2=='\"'))
					{
						alt3 = 2;
					}


				}
				else if (((LA3_1>='\u0000' && LA3_1<='!')||(LA3_1>='#' && LA3_1<='\uFFFF')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:241:11: ~ '\"'
					{
					DebugLocation(241, 11);
					input.Consume();


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:241:18: '\"\"'
					{
					DebugLocation(241, 18);
					Match("\"\""); 


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(241, 26);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING_LITERAL", 34);
			LeaveRule("STRING_LITERAL", 34);
			LeaveRule_STRING_LITERAL();
		}
	}
	// $ANTLR end "STRING_LITERAL"

	partial void EnterRule_HEX_LITERAL();
	partial void LeaveRule_HEX_LITERAL();

	// $ANTLR start "HEX_LITERAL"
	[GrammarRule("HEX_LITERAL")]
	private void mHEX_LITERAL()
	{
		EnterRule_HEX_LITERAL();
		EnterRule("HEX_LITERAL", 35);
		TraceIn("HEX_LITERAL", 35);
		try
		{
			int _type = HEX_LITERAL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:245:2: ( '&' ( 'H' | 'h' ) ( HexDigit )+ )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:245:4: '&' ( 'H' | 'h' ) ( HexDigit )+
			{
			DebugLocation(245, 4);
			Match('&'); 
			DebugLocation(245, 8);
			if (input.LA(1)=='H'||input.LA(1)=='h')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(245, 18);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:245:18: ( HexDigit )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if (((LA4_1>='0' && LA4_1<='9')||(LA4_1>='A' && LA4_1<='F')||(LA4_1>='a' && LA4_1<='f')))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:
					{
					DebugLocation(245, 18);
					input.Consume();


					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(245, 28);
			 Text = Text.Substring(2); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("HEX_LITERAL", 35);
			LeaveRule("HEX_LITERAL", 35);
			LeaveRule_HEX_LITERAL();
		}
	}
	// $ANTLR end "HEX_LITERAL"

	partial void EnterRule_DECIMAL_LITERAL();
	partial void LeaveRule_DECIMAL_LITERAL();

	// $ANTLR start "DECIMAL_LITERAL"
	[GrammarRule("DECIMAL_LITERAL")]
	private void mDECIMAL_LITERAL()
	{
		EnterRule_DECIMAL_LITERAL();
		EnterRule("DECIMAL_LITERAL", 36);
		TraceIn("DECIMAL_LITERAL", 36);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:251:2: ()
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:252:2: 
			{
			}

		}
		finally
		{
			TraceOut("DECIMAL_LITERAL", 36);
			LeaveRule("DECIMAL_LITERAL", 36);
			LeaveRule_DECIMAL_LITERAL();
		}
	}
	// $ANTLR end "DECIMAL_LITERAL"

	partial void EnterRule_HexDigit();
	partial void LeaveRule_HexDigit();

	// $ANTLR start "HexDigit"
	[GrammarRule("HexDigit")]
	private void mHexDigit()
	{
		EnterRule_HexDigit();
		EnterRule("HexDigit", 37);
		TraceIn("HexDigit", 37);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:255:10: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:
			{
			DebugLocation(255, 10);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HexDigit", 37);
			LeaveRule("HexDigit", 37);
			LeaveRule_HexDigit();
		}
	}
	// $ANTLR end "HexDigit"

	partial void EnterRule_FLOATING_POINT_LITERAL();
	partial void LeaveRule_FLOATING_POINT_LITERAL();

	// $ANTLR start "FLOATING_POINT_LITERAL"
	[GrammarRule("FLOATING_POINT_LITERAL")]
	private void mFLOATING_POINT_LITERAL()
	{
		EnterRule_FLOATING_POINT_LITERAL();
		EnterRule("FLOATING_POINT_LITERAL", 38);
		TraceIn("FLOATING_POINT_LITERAL", 38);
		try
		{
			int _type = FLOATING_POINT_LITERAL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:257:2: ( ( '0' .. '9' ) ( Digits )? ({...}? => '.' ( Digits )? ( Exponent )? ( FloatTypeSuffix )? | Exponent ( FloatTypeSuffix )? | ( NumericTypeSuffix )? ) | '.' ( Digits ( Exponent )? ( FloatTypeSuffix )? |) )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if (((LA15_1>='0' && LA15_1<='9')))
			{
				alt15 = 1;
			}
			else if ((LA15_1=='.'))
			{
				alt15 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:258:3: ( '0' .. '9' ) ( Digits )? ({...}? => '.' ( Digits )? ( Exponent )? ( FloatTypeSuffix )? | Exponent ( FloatTypeSuffix )? | ( NumericTypeSuffix )? )
				{
				DebugLocation(258, 3);
				input.Consume();

				DebugLocation(258, 14);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:258:14: ( Digits )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if (((LA5_1>='0' && LA5_1<='9')))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:258:14: Digits
					{
					DebugLocation(258, 14);
					mDigits(); 

					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(259, 3);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:259:3: ({...}? => '.' ( Digits )? ( Exponent )? ( FloatTypeSuffix )? | Exponent ( FloatTypeSuffix )? | ( NumericTypeSuffix )? )
				int alt11=3;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1=='.') && (( char.IsDigit((char)input.LA(2)) )))
				{
					alt11 = 1;
				}
				else if ((LA11_1=='E'||LA11_1=='e'))
				{
					alt11 = 2;
				}
				else
				{
					alt11 = 3;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:259:5: {...}? => '.' ( Digits )? ( Exponent )? ( FloatTypeSuffix )?
					{
					DebugLocation(259, 5);
					if (!(( char.IsDigit((char)input.LA(2)) )))
					{
						throw new FailedPredicateException(input, "FLOATING_POINT_LITERAL", " char.IsDigit((char)input.LA(2)) ");
					}
					DebugLocation(259, 45);
					Match('.'); 
					DebugLocation(259, 49);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:259:49: ( Digits )?
					int alt6=2;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, false);
					int LA6_1 = input.LA(1);

					if (((LA6_1>='0' && LA6_1<='9')))
					{
						alt6 = 1;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:259:49: Digits
						{
						DebugLocation(259, 49);
						mDigits(); 

						}
						break;

					}
					} finally { DebugExitSubRule(6); }

					DebugLocation(259, 57);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:259:57: ( Exponent )?
					int alt7=2;
					try { DebugEnterSubRule(7);
					try { DebugEnterDecision(7, false);
					int LA7_1 = input.LA(1);

					if ((LA7_1=='E'||LA7_1=='e'))
					{
						alt7 = 1;
					}
					} finally { DebugExitDecision(7); }
					switch (alt7)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:259:57: Exponent
						{
						DebugLocation(259, 57);
						mExponent(); 

						}
						break;

					}
					} finally { DebugExitSubRule(7); }

					DebugLocation(259, 67);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:259:67: ( FloatTypeSuffix )?
					int alt8=2;
					try { DebugEnterSubRule(8);
					try { DebugEnterDecision(8, false);
					int LA8_1 = input.LA(1);

					if ((LA8_1=='D'||LA8_1=='F'||LA8_1=='R'||LA8_1=='d'||LA8_1=='f'||LA8_1=='r'))
					{
						alt8 = 1;
					}
					} finally { DebugExitDecision(8); }
					switch (alt8)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:
						{
						DebugLocation(259, 67);
						input.Consume();


						}
						break;

					}
					} finally { DebugExitSubRule(8); }

					DebugLocation(259, 84);
					 _type = FLOATING_POINT_LITERAL; 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:260:5: Exponent ( FloatTypeSuffix )?
					{
					DebugLocation(260, 5);
					mExponent(); 
					DebugLocation(260, 14);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:260:14: ( FloatTypeSuffix )?
					int alt9=2;
					try { DebugEnterSubRule(9);
					try { DebugEnterDecision(9, false);
					int LA9_1 = input.LA(1);

					if ((LA9_1=='D'||LA9_1=='F'||LA9_1=='R'||LA9_1=='d'||LA9_1=='f'||LA9_1=='r'))
					{
						alt9 = 1;
					}
					} finally { DebugExitDecision(9); }
					switch (alt9)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:
						{
						DebugLocation(260, 14);
						input.Consume();


						}
						break;

					}
					} finally { DebugExitSubRule(9); }

					DebugLocation(260, 31);
					 _type = FLOATING_POINT_LITERAL; 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:261:5: ( NumericTypeSuffix )?
					{
					DebugLocation(261, 5);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:261:5: ( NumericTypeSuffix )?
					int alt10=2;
					try { DebugEnterSubRule(10);
					try { DebugEnterDecision(10, false);
					int LA10_1 = input.LA(1);

					if (((LA10_1>='C' && LA10_1<='D')||LA10_1=='F'||LA10_1=='I'||LA10_1=='L'||(LA10_1>='R' && LA10_1<='S')||LA10_1=='U'||(LA10_1>='c' && LA10_1<='d')||LA10_1=='f'||LA10_1=='i'||LA10_1=='l'||(LA10_1>='r' && LA10_1<='s')||LA10_1=='u'))
					{
						alt10 = 1;
					}
					} finally { DebugExitDecision(10); }
					switch (alt10)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:261:5: NumericTypeSuffix
						{
						DebugLocation(261, 5);
						mNumericTypeSuffix(); 

						}
						break;

					}
					} finally { DebugExitSubRule(10); }

					DebugLocation(261, 24);
					 _type = DECIMAL_LITERAL; 

					}
					break;

				}
				} finally { DebugExitSubRule(11); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:264:3: '.' ( Digits ( Exponent )? ( FloatTypeSuffix )? |)
				{
				DebugLocation(264, 3);
				Match('.'); 
				DebugLocation(265, 3);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:265:3: ( Digits ( Exponent )? ( FloatTypeSuffix )? |)
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if (((LA14_1>='0' && LA14_1<='9')))
				{
					alt14 = 1;
				}
				else
				{
					alt14 = 2;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:265:5: Digits ( Exponent )? ( FloatTypeSuffix )?
					{
					DebugLocation(265, 5);
					mDigits(); 
					DebugLocation(265, 12);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:265:12: ( Exponent )?
					int alt12=2;
					try { DebugEnterSubRule(12);
					try { DebugEnterDecision(12, false);
					int LA12_1 = input.LA(1);

					if ((LA12_1=='E'||LA12_1=='e'))
					{
						alt12 = 1;
					}
					} finally { DebugExitDecision(12); }
					switch (alt12)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:265:12: Exponent
						{
						DebugLocation(265, 12);
						mExponent(); 

						}
						break;

					}
					} finally { DebugExitSubRule(12); }

					DebugLocation(265, 22);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:265:22: ( FloatTypeSuffix )?
					int alt13=2;
					try { DebugEnterSubRule(13);
					try { DebugEnterDecision(13, false);
					int LA13_1 = input.LA(1);

					if ((LA13_1=='D'||LA13_1=='F'||LA13_1=='R'||LA13_1=='d'||LA13_1=='f'||LA13_1=='r'))
					{
						alt13 = 1;
					}
					} finally { DebugExitDecision(13); }
					switch (alt13)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:
						{
						DebugLocation(265, 22);
						input.Consume();


						}
						break;

					}
					} finally { DebugExitSubRule(13); }

					DebugLocation(265, 39);
					 _type = FLOATING_POINT_LITERAL; 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:266:5: 
					{
					DebugLocation(266, 5);
					 _type = DOT; 

					}
					break;

				}
				} finally { DebugExitSubRule(14); }


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOATING_POINT_LITERAL", 38);
			LeaveRule("FLOATING_POINT_LITERAL", 38);
			LeaveRule_FLOATING_POINT_LITERAL();
		}
	}
	// $ANTLR end "FLOATING_POINT_LITERAL"

	partial void EnterRule_Digits();
	partial void LeaveRule_Digits();

	// $ANTLR start "Digits"
	[GrammarRule("Digits")]
	private void mDigits()
	{
		EnterRule_Digits();
		EnterRule("Digits", 39);
		TraceIn("Digits", 39);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:274:2: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:274:6: ( '0' .. '9' )+
			{
			DebugLocation(274, 6);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:274:6: ( '0' .. '9' )+
			int cnt16=0;
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if (((LA16_1>='0' && LA16_1<='9')))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:
					{
					DebugLocation(274, 6);
					input.Consume();


					}
					break;

				default:
					if (cnt16 >= 1)
						goto loop16;

					EarlyExitException eee16 = new EarlyExitException( 16, input );
					DebugRecognitionException(eee16);
					throw eee16;
				}
				cnt16++;
			}
			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

		}
		finally
		{
			TraceOut("Digits", 39);
			LeaveRule("Digits", 39);
			LeaveRule_Digits();
		}
	}
	// $ANTLR end "Digits"

	partial void EnterRule_Exponent();
	partial void LeaveRule_Exponent();

	// $ANTLR start "Exponent"
	[GrammarRule("Exponent")]
	private void mExponent()
	{
		EnterRule_Exponent();
		EnterRule("Exponent", 40);
		TraceIn("Exponent", 40);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:279:2: ( ( 'e' | 'E' ) ( '+' | '-' )? ( Digits |) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:279:6: ( 'e' | 'E' ) ( '+' | '-' )? ( Digits |)
			{
			DebugLocation(279, 6);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(279, 16);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:279:16: ( '+' | '-' )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1=='+'||LA17_1=='-'))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:
				{
				DebugLocation(279, 16);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(280, 3);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:280:3: ( Digits |)
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_1 = input.LA(1);

			if (((LA18_1>='0' && LA18_1<='9')))
			{
				alt18 = 1;
			}
			else
			{
				alt18 = 2;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:280:5: Digits
				{
				DebugLocation(280, 5);
				mDigits(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:282:4: 
				{
				DebugLocation(282, 4);

								EmitErrorMessage("Malformed exponent");
								Text = "0.0";
							

				}
				break;

			}
			} finally { DebugExitSubRule(18); }


			}

		}
		finally
		{
			TraceOut("Exponent", 40);
			LeaveRule("Exponent", 40);
			LeaveRule_Exponent();
		}
	}
	// $ANTLR end "Exponent"

	partial void EnterRule_NumericTypeSuffix();
	partial void LeaveRule_NumericTypeSuffix();

	// $ANTLR start "NumericTypeSuffix"
	[GrammarRule("NumericTypeSuffix")]
	private void mNumericTypeSuffix()
	{
		EnterRule_NumericTypeSuffix();
		EnterRule("NumericTypeSuffix", 41);
		TraceIn("NumericTypeSuffix", 41);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:291:2: ( ( 'U' | 'u' ) ( 'L' | 'l' ) | ( 'L' | 'l' ) | ( 'U' | 'u' ) ( 'S' | 's' ) | ( 'S' | 's' ) | ( 'U' | 'u' ) ( 'I' | 'i' ) | ( 'I' | 'i' ) | ( 'C' | 'c' ) | FloatTypeSuffix )
			int alt19=8;
			try { DebugEnterDecision(19, false);
			switch (input.LA(1))
			{
			case 'U':
			case 'u':
				{
				switch (input.LA(2))
				{
				case 'L':
				case 'l':
					{
					alt19 = 1;
					}
					break;
				case 'S':
				case 's':
					{
					alt19 = 3;
					}
					break;
				case 'I':
				case 'i':
					{
					alt19 = 5;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 19, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 'L':
			case 'l':
				{
				alt19 = 2;
				}
				break;
			case 'S':
			case 's':
				{
				alt19 = 4;
				}
				break;
			case 'I':
			case 'i':
				{
				alt19 = 6;
				}
				break;
			case 'C':
			case 'c':
				{
				alt19 = 7;
				}
				break;
			case 'D':
			case 'F':
			case 'R':
			case 'd':
			case 'f':
			case 'r':
				{
				alt19 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:291:4: ( 'U' | 'u' ) ( 'L' | 'l' )
				{
				DebugLocation(291, 4);
				input.Consume();

				DebugLocation(291, 13);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:292:4: ( 'L' | 'l' )
				{
				DebugLocation(292, 4);
				input.Consume();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:293:4: ( 'U' | 'u' ) ( 'S' | 's' )
				{
				DebugLocation(293, 4);
				input.Consume();

				DebugLocation(293, 13);
				input.Consume();


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:294:4: ( 'S' | 's' )
				{
				DebugLocation(294, 4);
				input.Consume();


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:295:4: ( 'U' | 'u' ) ( 'I' | 'i' )
				{
				DebugLocation(295, 4);
				input.Consume();

				DebugLocation(295, 13);
				input.Consume();


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:296:4: ( 'I' | 'i' )
				{
				DebugLocation(296, 4);
				input.Consume();


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:297:4: ( 'C' | 'c' )
				{
				DebugLocation(297, 4);
				input.Consume();


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:298:4: FloatTypeSuffix
				{
				DebugLocation(298, 4);
				mFloatTypeSuffix(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("NumericTypeSuffix", 41);
			LeaveRule("NumericTypeSuffix", 41);
			LeaveRule_NumericTypeSuffix();
		}
	}
	// $ANTLR end "NumericTypeSuffix"

	partial void EnterRule_FloatTypeSuffix();
	partial void LeaveRule_FloatTypeSuffix();

	// $ANTLR start "FloatTypeSuffix"
	[GrammarRule("FloatTypeSuffix")]
	private void mFloatTypeSuffix()
	{
		EnterRule_FloatTypeSuffix();
		EnterRule("FloatTypeSuffix", 42);
		TraceIn("FloatTypeSuffix", 42);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:303:2: ( ( 'F' | 'f' | 'R' | 'r' | 'D' | 'd' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:
			{
			DebugLocation(303, 2);
			if (input.LA(1)=='D'||input.LA(1)=='F'||input.LA(1)=='R'||input.LA(1)=='d'||input.LA(1)=='f'||input.LA(1)=='r')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("FloatTypeSuffix", 42);
			LeaveRule("FloatTypeSuffix", 42);
			LeaveRule_FloatTypeSuffix();
		}
	}
	// $ANTLR end "FloatTypeSuffix"

	partial void EnterRule_IDENTIFIER();
	partial void LeaveRule_IDENTIFIER();

	// $ANTLR start "IDENTIFIER"
	[GrammarRule("IDENTIFIER")]
	private void mIDENTIFIER()
	{
		EnterRule_IDENTIFIER();
		EnterRule("IDENTIFIER", 43);
		TraceIn("IDENTIFIER", 43);
		try
		{
			int _type = IDENTIFIER;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:306:2: ( LETTER ( LETTER | '0' .. '9' )* )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:306:4: LETTER ( LETTER | '0' .. '9' )*
			{
			DebugLocation(306, 4);
			mLETTER(); 
			DebugLocation(306, 11);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:306:11: ( LETTER | '0' .. '9' )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if (((LA20_1>='0' && LA20_1<='9')||(LA20_1>='A' && LA20_1<='Z')||LA20_1=='_'||(LA20_1>='a' && LA20_1<='z')))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:
					{
					DebugLocation(306, 11);
					input.Consume();


					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENTIFIER", 43);
			LeaveRule("IDENTIFIER", 43);
			LeaveRule_IDENTIFIER();
		}
	}
	// $ANTLR end "IDENTIFIER"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 44);
		TraceIn("LETTER", 44);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:312:2: ( 'A' .. 'Z' | 'a' .. 'z' | '_' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:
			{
			DebugLocation(312, 2);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LETTER", 44);
			LeaveRule("LETTER", 44);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 45);
		TraceIn("WS", 45);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:317:2: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:317:4: ( ' ' | '\\t' | '\\r' | '\\n' )+
			{
			DebugLocation(317, 4);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:317:4: ( ' ' | '\\t' | '\\r' | '\\n' )+
			int cnt21=0;
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_1 = input.LA(1);

				if (((LA21_1>='\t' && LA21_1<='\n')||LA21_1=='\r'||LA21_1==' '))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch (alt21)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:
					{
					DebugLocation(317, 4);
					input.Consume();


					}
					break;

				default:
					if (cnt21 >= 1)
						goto loop21;

					EarlyExitException eee21 = new EarlyExitException( 21, input );
					DebugRecognitionException(eee21);
					throw eee21;
				}
				cnt21++;
			}
			loop21:
				;

			} finally { DebugExitSubRule(21); }

			DebugLocation(318, 2);

			// This construct is to make ANTLRWorks happy.
			#if true
					Skip();
			#else
					_channel = HIDDEN;
			#endif
				

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 45);
			LeaveRule("WS", 45);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	public override void mTokens()
	{
		// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:8: ( T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | AND | ANDALSO | OR | ORELSE | XOR | CTYPE | DIRECTCAST | IIF | IS | NOT | TRUE | FALSE | NOTHING | DOT | CHARACTER_LITERAL | TIMESPAN_LITERAL | DATETIME_LITERAL | STRING_LITERAL | HEX_LITERAL | FLOATING_POINT_LITERAL | IDENTIFIER | WS )
		int alt22=38;
		try { DebugEnterDecision(22, false);
		try
		{
			alt22 = dfa22.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(22); }
		switch (alt22)
		{
		case 1:
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:10: T__33
			{
			DebugLocation(1, 10);
			mT__33(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:16: T__34
			{
			DebugLocation(1, 16);
			mT__34(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:22: T__35
			{
			DebugLocation(1, 22);
			mT__35(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:28: T__36
			{
			DebugLocation(1, 28);
			mT__36(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:34: T__37
			{
			DebugLocation(1, 34);
			mT__37(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:40: T__38
			{
			DebugLocation(1, 40);
			mT__38(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:46: T__39
			{
			DebugLocation(1, 46);
			mT__39(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:52: T__40
			{
			DebugLocation(1, 52);
			mT__40(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:58: T__41
			{
			DebugLocation(1, 58);
			mT__41(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:64: T__42
			{
			DebugLocation(1, 64);
			mT__42(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:70: T__43
			{
			DebugLocation(1, 70);
			mT__43(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:76: T__44
			{
			DebugLocation(1, 76);
			mT__44(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:82: T__45
			{
			DebugLocation(1, 82);
			mT__45(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:88: T__46
			{
			DebugLocation(1, 88);
			mT__46(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:94: T__47
			{
			DebugLocation(1, 94);
			mT__47(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:100: T__48
			{
			DebugLocation(1, 100);
			mT__48(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:106: AND
			{
			DebugLocation(1, 106);
			mAND(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:110: ANDALSO
			{
			DebugLocation(1, 110);
			mANDALSO(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:118: OR
			{
			DebugLocation(1, 118);
			mOR(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:121: ORELSE
			{
			DebugLocation(1, 121);
			mORELSE(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:128: XOR
			{
			DebugLocation(1, 128);
			mXOR(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:132: CTYPE
			{
			DebugLocation(1, 132);
			mCTYPE(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:138: DIRECTCAST
			{
			DebugLocation(1, 138);
			mDIRECTCAST(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:149: IIF
			{
			DebugLocation(1, 149);
			mIIF(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:153: IS
			{
			DebugLocation(1, 153);
			mIS(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:156: NOT
			{
			DebugLocation(1, 156);
			mNOT(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:160: TRUE
			{
			DebugLocation(1, 160);
			mTRUE(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:165: FALSE
			{
			DebugLocation(1, 165);
			mFALSE(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:171: NOTHING
			{
			DebugLocation(1, 171);
			mNOTHING(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:179: DOT
			{
			DebugLocation(1, 179);
			mDOT(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:183: CHARACTER_LITERAL
			{
			DebugLocation(1, 183);
			mCHARACTER_LITERAL(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:201: TIMESPAN_LITERAL
			{
			DebugLocation(1, 201);
			mTIMESPAN_LITERAL(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:218: DATETIME_LITERAL
			{
			DebugLocation(1, 218);
			mDATETIME_LITERAL(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:235: STRING_LITERAL
			{
			DebugLocation(1, 235);
			mSTRING_LITERAL(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:250: HEX_LITERAL
			{
			DebugLocation(1, 250);
			mHEX_LITERAL(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:262: FLOATING_POINT_LITERAL
			{
			DebugLocation(1, 262);
			mFLOATING_POINT_LITERAL(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:285: IDENTIFIER
			{
			DebugLocation(1, 285);
			mIDENTIFIER(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:1:296: WS
			{
			DebugLocation(1, 296);
			mWS(); 

			}
			break;

		}

	}


	#region DFA
	DFA22 dfa22;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa22 = new DFA22(this, SpecialStateTransition22);
	}

	private class DFA22 : DFA
	{
		private const string DFA22_eotS =
			"\x1\x17\x1\xFFFF\x1\x1F\x7\xFFFF\x1\x22\x1\xFFFF\x1\x24\x1\xFFFF\x9\x1C"+
			"\xE\xFFFF\x1\x1C\x1\x33\x4\x1C\x1\x38\x3\x1C\x1\x30\x1\xFFFF\x1\x3E\x1"+
			"\x1C\x1\xFFFF\x1\x40\x2\x1C\x1\x43\x1\xFFFF\x1\x45\x2\x1C\x1\xFFFF\x1"+
			"\x1C\x1\xFFFF\x1\x1C\x1\xFFFF\x2\x1C\x1\xFFFF\x1\x1C\x1\xFFFF\x1\x4D"+
			"\x3\x1C\x1\x51\x2\x1C\x1\xFFFF\x1\x54\x1\x1C\x1\x56\x1\xFFFF\x2\x1C\x1"+
			"\xFFFF\x1\x59\x1\xFFFF\x1\x1C\x1\x5B\x1\xFFFF\x1\x1C\x1\xFFFF\x1\x1C"+
			"\x1\x5E\x1\xFFFF";
		private const string DFA22_eofS =
			"\x5F\xFFFF";
		private const string DFA22_minS =
			"\x1\x9\x1\xFFFF\x1\x48\x7\xFFFF\x1\x3D\x1\xFFFF\x1\x3D\x1\xFFFF\x1\x4E"+
			"\x1\x52\x1\x4F\x1\x54\x2\x49\x1\x4F\x1\x52\x1\x41\x2\xFFFF\x1\x0\xB\xFFFF"+
			"\x1\x44\x1\x30\x1\x52\x1\x59\x1\x52\x1\x46\x1\x30\x1\x54\x1\x55\x1\x4C"+
			"\x1\x0\x1\xFFFF\x1\x30\x1\x4C\x1\xFFFF\x1\x30\x1\x50\x1\x45\x1\x30\x1"+
			"\xFFFF\x1\x30\x1\x45\x1\x53\x1\xFFFF\x1\x4C\x1\xFFFF\x1\x53\x1\xFFFF"+
			"\x1\x45\x1\x43\x1\xFFFF\x1\x49\x1\xFFFF\x1\x30\x1\x45\x1\x53\x1\x45\x1"+
			"\x30\x1\x54\x1\x4E\x1\xFFFF\x1\x30\x1\x4F\x1\x30\x1\xFFFF\x1\x43\x1\x47"+
			"\x1\xFFFF\x1\x30\x1\xFFFF\x1\x41\x1\x30\x1\xFFFF\x1\x53\x1\xFFFF\x1\x54"+
			"\x1\x30\x1\xFFFF";
		private const string DFA22_maxS =
			"\x1\x7A\x1\xFFFF\x1\x68\x7\xFFFF\x1\x3E\x1\xFFFF\x1\x3D\x1\xFFFF\x1\x6E"+
			"\x1\x72\x1\x6F\x1\x74\x1\x69\x1\x73\x1\x6F\x1\x72\x1\x61\x2\xFFFF\x1"+
			"\xFFFF\xB\xFFFF\x1\x64\x1\x7A\x1\x72\x1\x79\x1\x72\x1\x66\x1\x7A\x1\x74"+
			"\x1\x75\x1\x6C\x1\xFFFF\x1\xFFFF\x1\x7A\x1\x6C\x1\xFFFF\x1\x7A\x1\x70"+
			"\x1\x65\x1\x7A\x1\xFFFF\x1\x7A\x1\x65\x1\x73\x1\xFFFF\x1\x6C\x1\xFFFF"+
			"\x1\x73\x1\xFFFF\x1\x65\x1\x63\x1\xFFFF\x1\x69\x1\xFFFF\x1\x7A\x1\x65"+
			"\x1\x73\x1\x65\x1\x7A\x1\x74\x1\x6E\x1\xFFFF\x1\x7A\x1\x6F\x1\x7A\x1"+
			"\xFFFF\x1\x63\x1\x67\x1\xFFFF\x1\x7A\x1\xFFFF\x1\x61\x1\x7A\x1\xFFFF"+
			"\x1\x73\x1\xFFFF\x1\x74\x1\x7A\x1\xFFFF";
		private const string DFA22_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1"+
			"\xFFFF\x1\xD\x1\xFFFF\x1\x10\x9\xFFFF\x1\x1E\x1\x1F\x1\xFFFF\x1\x22\x1"+
			"\x24\x1\x25\x1\x26\x1\x23\x1\x2\x1\xB\x1\xC\x1\xA\x1\xF\x1\xE\xB\xFFFF"+
			"\x1\x21\x2\xFFFF\x1\x13\x4\xFFFF\x1\x19\x3\xFFFF\x1\x20\x1\xFFFF\x1\x11"+
			"\x1\xFFFF\x1\x15\x2\xFFFF\x1\x18\x1\xFFFF\x1\x1A\x7\xFFFF\x1\x1B\x3\xFFFF"+
			"\x1\x16\x2\xFFFF\x1\x1C\x1\xFFFF\x1\x14\x2\xFFFF\x1\x12\x1\xFFFF\x1\x1D"+
			"\x2\xFFFF\x1\x17";
		private const string DFA22_specialS =
			"\x19\xFFFF\x1\x0\x15\xFFFF\x1\x1\x2F\xFFFF}>";
		private static readonly string[] DFA22_transitionS =
			{
				"\x2\x1D\x2\xFFFF\x1\x1D\x12\xFFFF\x1\x1D\x1\xFFFF\x1\x1A\x1\x19\x1\xFFFF"+
				"\x1\x1\x1\x2\x1\x18\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x1B\x1\x9"+
				"\xA\x1B\x2\xFFFF\x1\xA\x1\xB\x1\xC\x2\xFFFF\x1\xE\x1\x1C\x1\x11\x1\x12"+
				"\x1\x1C\x1\x16\x2\x1C\x1\x13\x4\x1C\x1\x14\x1\xF\x4\x1C\x1\x15\x3\x1C"+
				"\x1\x10\x2\x1C\x3\xFFFF\x1\xD\x1\x1C\x1\xFFFF\x1\xE\x1\x1C\x1\x11\x1"+
				"\x12\x1\x1C\x1\x16\x2\x1C\x1\x13\x4\x1C\x1\x14\x1\xF\x4\x1C\x1\x15\x3"+
				"\x1C\x1\x10\x2\x1C",
				"",
				"\x1\x1E\x1F\xFFFF\x1\x1E",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x20\x1\x21",
				"",
				"\x1\x23",
				"",
				"\x1\x25\x1F\xFFFF\x1\x25",
				"\x1\x26\x1F\xFFFF\x1\x26",
				"\x1\x27\x1F\xFFFF\x1\x27",
				"\x1\x28\x1F\xFFFF\x1\x28",
				"\x1\x29\x1F\xFFFF\x1\x29",
				"\x1\x2A\x9\xFFFF\x1\x2B\x15\xFFFF\x1\x2A\x9\xFFFF\x1\x2B",
				"\x1\x2C\x1F\xFFFF\x1\x2C",
				"\x1\x2D\x1F\xFFFF\x1\x2D",
				"\x1\x2E\x1F\xFFFF\x1\x2E",
				"",
				"",
				"\x23\x30\x1\x2F\xFFDC\x30",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x31\x1F\xFFFF\x1\x31",
				"\xA\x1C\x7\xFFFF\x4\x1C\x1\x32\x15\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x4\x1C"+
				"\x1\x32\x15\x1C",
				"\x1\x34\x1F\xFFFF\x1\x34",
				"\x1\x35\x1F\xFFFF\x1\x35",
				"\x1\x36\x1F\xFFFF\x1\x36",
				"\x1\x37\x1F\xFFFF\x1\x37",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\x1\x39\x1F\xFFFF\x1\x39",
				"\x1\x3A\x1F\xFFFF\x1\x3A",
				"\x1\x3B\x1F\xFFFF\x1\x3B",
				"\x0\x3C",
				"",
				"\xA\x1C\x7\xFFFF\x1\x3D\x19\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1\x3D\x19"+
				"\x1C",
				"\x1\x3F\x1F\xFFFF\x1\x3F",
				"",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\x1\x41\x1F\xFFFF\x1\x41",
				"\x1\x42\x1F\xFFFF\x1\x42",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"",
				"\xA\x1C\x7\xFFFF\x7\x1C\x1\x44\x12\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x7\x1C"+
				"\x1\x44\x12\x1C",
				"\x1\x46\x1F\xFFFF\x1\x46",
				"\x1\x47\x1F\xFFFF\x1\x47",
				"",
				"\x1\x48\x1F\xFFFF\x1\x48",
				"",
				"\x1\x49\x1F\xFFFF\x1\x49",
				"",
				"\x1\x4A\x1F\xFFFF\x1\x4A",
				"\x1\x4B\x1F\xFFFF\x1\x4B",
				"",
				"\x1\x4C\x1F\xFFFF\x1\x4C",
				"",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\x1\x4E\x1F\xFFFF\x1\x4E",
				"\x1\x4F\x1F\xFFFF\x1\x4F",
				"\x1\x50\x1F\xFFFF\x1\x50",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\x1\x52\x1F\xFFFF\x1\x52",
				"\x1\x53\x1F\xFFFF\x1\x53",
				"",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\x1\x55\x1F\xFFFF\x1\x55",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"",
				"\x1\x57\x1F\xFFFF\x1\x57",
				"\x1\x58\x1F\xFFFF\x1\x58",
				"",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"",
				"\x1\x5A\x1F\xFFFF\x1\x5A",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"",
				"\x1\x5C\x1F\xFFFF\x1\x5C",
				"",
				"\x1\x5D\x1F\xFFFF\x1\x5D",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				""
			};

		private static readonly short[] DFA22_eot = DFA.UnpackEncodedString(DFA22_eotS);
		private static readonly short[] DFA22_eof = DFA.UnpackEncodedString(DFA22_eofS);
		private static readonly char[] DFA22_min = DFA.UnpackEncodedStringToUnsignedChars(DFA22_minS);
		private static readonly char[] DFA22_max = DFA.UnpackEncodedStringToUnsignedChars(DFA22_maxS);
		private static readonly short[] DFA22_accept = DFA.UnpackEncodedString(DFA22_acceptS);
		private static readonly short[] DFA22_special = DFA.UnpackEncodedString(DFA22_specialS);
		private static readonly short[][] DFA22_transition;

		static DFA22()
		{
			int numStates = DFA22_transitionS.Length;
			DFA22_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA22_transition[i] = DFA.UnpackEncodedString(DFA22_transitionS[i]);
			}
		}

		public DFA22( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 22;
			this.eot = DFA22_eot;
			this.eof = DFA22_eof;
			this.min = DFA22_min;
			this.max = DFA22_max;
			this.accept = DFA22_accept;
			this.special = DFA22_special;
			this.transition = DFA22_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | AND | ANDALSO | OR | ORELSE | XOR | CTYPE | DIRECTCAST | IIF | IS | NOT | TRUE | FALSE | NOTHING | DOT | CHARACTER_LITERAL | TIMESPAN_LITERAL | DATETIME_LITERAL | STRING_LITERAL | HEX_LITERAL | FLOATING_POINT_LITERAL | IDENTIFIER | WS );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition22(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		s = -1;
		int LA22_1 = input.LA(1);
		int index22_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				if ((LA22_1=='#')) {s = 47;}

				else if (((LA22_1>='\u0000' && LA22_1<='\"')||(LA22_1>='$' && LA22_1<='\uFFFF'))) {s = 48;}

				break;
			}
		case 1:
			{
				if (((LA22_1>='\u0000' && LA22_1<='\uFFFF'))) {s = 60;}

				else s = 48;

				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		NoViableAltException nvae = new NoViableAltException(dfa.Description, 22, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
 
	#endregion

}

} // namespace  Expressions.VisualBasic 

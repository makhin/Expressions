//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g 2017-01-05 07:49:03

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using Expressions.Ast;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Expressions.VisualBasic 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
 internal  partial class VisualBasicParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "ANDALSO", "CHARACTER_LITERAL", "CTYPE", "DATETIME_LITERAL", "DECIMAL_LITERAL", "DIRECTCAST", "DOT", "Digits", "Exponent", "FALSE", "FLOATING_POINT_LITERAL", "FloatTypeSuffix", "HEX_LITERAL", "HexDigit", "IDENTIFIER", "IIF", "IS", "LETTER", "NOT", "NOTHING", "NumericTypeSuffix", "OR", "ORELSE", "STRING_LITERAL", "TIMESPAN_LITERAL", "TRUE", "WS", "XOR", "'%'", "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'/'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'^'"
	};
	public const int EOF=-1;
	public const int AND=4;
	public const int ANDALSO=5;
	public const int CHARACTER_LITERAL=6;
	public const int CTYPE=7;
	public const int DATETIME_LITERAL=8;
	public const int DECIMAL_LITERAL=9;
	public const int DIRECTCAST=10;
	public const int DOT=11;
	public const int Digits=12;
	public const int Exponent=13;
	public const int FALSE=14;
	public const int FLOATING_POINT_LITERAL=15;
	public const int FloatTypeSuffix=16;
	public const int HEX_LITERAL=17;
	public const int HexDigit=18;
	public const int IDENTIFIER=19;
	public const int IIF=20;
	public const int IS=21;
	public const int LETTER=22;
	public const int NOT=23;
	public const int NOTHING=24;
	public const int NumericTypeSuffix=25;
	public const int OR=26;
	public const int ORELSE=27;
	public const int STRING_LITERAL=28;
	public const int TIMESPAN_LITERAL=29;
	public const int TRUE=30;
	public const int WS=31;
	public const int XOR=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;

	public VisualBasicParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public VisualBasicParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return VisualBasicParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	private sealed partial class prog_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public prog_return(VisualBasicParser grammar) {OnCreated(grammar);}
		partial void OnCreated(VisualBasicParser grammar);
	}

	partial void EnterRule_prog();
	partial void LeaveRule_prog();
	// $ANTLR start "prog"
	// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:29:1: prog returns [IAstNode value] : expression EOF ;
	[GrammarRule("prog")]
	private VisualBasicParser.prog_return prog()
	{
		EnterRule_prog();
		EnterRule("prog", 1);
		TraceIn("prog", 1);
		VisualBasicParser.prog_return retval = new VisualBasicParser.prog_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EOF2 = default(CommonToken);
		VisualBasicParser.expression_return expression1 = default(VisualBasicParser.expression_return);

		CommonTree EOF2_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prog");
		DebugLocation(29, 1);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:30:2: ( expression EOF )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:30:4: expression EOF
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(30, 4);
			PushFollow(Follow._expression_in_prog97);
			expression1=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression1.Tree);
			DebugLocation(30, 15);
			 retval.value = (expression1!=null?expression1.value:default(IAstNode)); 
			DebugLocation(30, 47);
			EOF2=(CommonToken)Match(input,EOF,Follow._EOF_in_prog101); 
			EOF2_tree = (CommonTree)adaptor.Create(EOF2);
			adaptor.AddChild(root_0, EOF2_tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("prog", 1);
			LeaveRule("prog", 1);
			LeaveRule_prog();
		}
		DebugLocation(31, 1);
		} finally { DebugExitRule(GrammarFileName, "prog"); }
		return retval;

	}
	// $ANTLR end "prog"

	private sealed partial class expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public expression_return(VisualBasicParser grammar) {OnCreated(grammar);}
		partial void OnCreated(VisualBasicParser grammar);
	}

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:33:1: expression returns [IAstNode value] : e= logical_xor_expression ( OR e= logical_xor_expression | ORELSE e= logical_xor_expression )* ;
	[GrammarRule("expression")]
	private VisualBasicParser.expression_return expression()
	{
		EnterRule_expression();
		EnterRule("expression", 2);
		TraceIn("expression", 2);
		VisualBasicParser.expression_return retval = new VisualBasicParser.expression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OR3 = default(CommonToken);
		CommonToken ORELSE4 = default(CommonToken);
		VisualBasicParser.logical_xor_expression_return e = default(VisualBasicParser.logical_xor_expression_return);

		CommonTree OR3_tree = default(CommonTree);
		CommonTree ORELSE4_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(33, 1);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:34:2: (e= logical_xor_expression ( OR e= logical_xor_expression | ORELSE e= logical_xor_expression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:34:4: e= logical_xor_expression ( OR e= logical_xor_expression | ORELSE e= logical_xor_expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(34, 5);
			PushFollow(Follow._logical_xor_expression_in_expression118);
			e=logical_xor_expression();
			PopFollow();

			adaptor.AddChild(root_0, e.Tree);
			DebugLocation(34, 29);
			 retval.value = (e!=null?e.value:default(IAstNode)); 
			DebugLocation(35, 3);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:35:3: ( OR e= logical_xor_expression | ORELSE e= logical_xor_expression )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=3;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if ((LA1_1==OR))
				{
					alt1 = 1;
				}
				else if ((LA1_1==ORELSE))
				{
					alt1 = 2;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:35:5: OR e= logical_xor_expression
					{
					DebugLocation(35, 5);
					OR3=(CommonToken)Match(input,OR,Follow._OR_in_expression126); 
					OR3_tree = (CommonTree)adaptor.Create(OR3);
					adaptor.AddChild(root_0, OR3_tree);
					DebugLocation(35, 9);
					PushFollow(Follow._logical_xor_expression_in_expression130);
					e=logical_xor_expression();
					PopFollow();

					adaptor.AddChild(root_0, e.Tree);
					DebugLocation(36, 5);
					 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.OrBoth); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:37:5: ORELSE e= logical_xor_expression
					{
					DebugLocation(37, 5);
					ORELSE4=(CommonToken)Match(input,ORELSE,Follow._ORELSE_in_expression142); 
					ORELSE4_tree = (CommonTree)adaptor.Create(ORELSE4);
					adaptor.AddChild(root_0, ORELSE4_tree);
					DebugLocation(37, 13);
					PushFollow(Follow._logical_xor_expression_in_expression146);
					e=logical_xor_expression();
					PopFollow();

					adaptor.AddChild(root_0, e.Tree);
					DebugLocation(38, 5);
					 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.Or); 

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("expression", 2);
			LeaveRule("expression", 2);
			LeaveRule_expression();
		}
		DebugLocation(40, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	private sealed partial class logical_xor_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public logical_xor_expression_return(VisualBasicParser grammar) {OnCreated(grammar);}
		partial void OnCreated(VisualBasicParser grammar);
	}

	partial void EnterRule_logical_xor_expression();
	partial void LeaveRule_logical_xor_expression();
	// $ANTLR start "logical_xor_expression"
	// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:42:1: logical_xor_expression returns [IAstNode value] : e= logical_and_expression ( XOR e= logical_and_expression )* ;
	[GrammarRule("logical_xor_expression")]
	private VisualBasicParser.logical_xor_expression_return logical_xor_expression()
	{
		EnterRule_logical_xor_expression();
		EnterRule("logical_xor_expression", 3);
		TraceIn("logical_xor_expression", 3);
		VisualBasicParser.logical_xor_expression_return retval = new VisualBasicParser.logical_xor_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken XOR5 = default(CommonToken);
		VisualBasicParser.logical_and_expression_return e = default(VisualBasicParser.logical_and_expression_return);

		CommonTree XOR5_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "logical_xor_expression");
		DebugLocation(42, 1);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:43:2: (e= logical_and_expression ( XOR e= logical_and_expression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:43:4: e= logical_and_expression ( XOR e= logical_and_expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(43, 5);
			PushFollow(Follow._logical_and_expression_in_logical_xor_expression174);
			e=logical_and_expression();
			PopFollow();

			adaptor.AddChild(root_0, e.Tree);
			DebugLocation(43, 29);
			 retval.value = (e!=null?e.value:default(IAstNode)); 
			DebugLocation(44, 3);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:44:3: ( XOR e= logical_and_expression )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==XOR))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:44:5: XOR e= logical_and_expression
					{
					DebugLocation(44, 5);
					XOR5=(CommonToken)Match(input,XOR,Follow._XOR_in_logical_xor_expression182); 
					XOR5_tree = (CommonTree)adaptor.Create(XOR5);
					adaptor.AddChild(root_0, XOR5_tree);
					DebugLocation(44, 10);
					PushFollow(Follow._logical_and_expression_in_logical_xor_expression186);
					e=logical_and_expression();
					PopFollow();

					adaptor.AddChild(root_0, e.Tree);
					DebugLocation(45, 5);
					 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.Xor); 

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("logical_xor_expression", 3);
			LeaveRule("logical_xor_expression", 3);
			LeaveRule_logical_xor_expression();
		}
		DebugLocation(47, 1);
		} finally { DebugExitRule(GrammarFileName, "logical_xor_expression"); }
		return retval;

	}
	// $ANTLR end "logical_xor_expression"

	private sealed partial class logical_and_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public logical_and_expression_return(VisualBasicParser grammar) {OnCreated(grammar);}
		partial void OnCreated(VisualBasicParser grammar);
	}

	partial void EnterRule_logical_and_expression();
	partial void LeaveRule_logical_and_expression();
	// $ANTLR start "logical_and_expression"
	// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:49:1: logical_and_expression returns [IAstNode value] : e= unary_not_expression ( AND e= unary_not_expression | ANDALSO e= unary_not_expression )* ;
	[GrammarRule("logical_and_expression")]
	private VisualBasicParser.logical_and_expression_return logical_and_expression()
	{
		EnterRule_logical_and_expression();
		EnterRule("logical_and_expression", 4);
		TraceIn("logical_and_expression", 4);
		VisualBasicParser.logical_and_expression_return retval = new VisualBasicParser.logical_and_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken AND6 = default(CommonToken);
		CommonToken ANDALSO7 = default(CommonToken);
		VisualBasicParser.unary_not_expression_return e = default(VisualBasicParser.unary_not_expression_return);

		CommonTree AND6_tree = default(CommonTree);
		CommonTree ANDALSO7_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "logical_and_expression");
		DebugLocation(49, 1);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:50:2: (e= unary_not_expression ( AND e= unary_not_expression | ANDALSO e= unary_not_expression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:50:4: e= unary_not_expression ( AND e= unary_not_expression | ANDALSO e= unary_not_expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(50, 5);
			PushFollow(Follow._unary_not_expression_in_logical_and_expression214);
			e=unary_not_expression();
			PopFollow();

			adaptor.AddChild(root_0, e.Tree);
			DebugLocation(50, 27);
			 retval.value = (e!=null?e.value:default(IAstNode)); 
			DebugLocation(51, 3);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:51:3: ( AND e= unary_not_expression | ANDALSO e= unary_not_expression )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=3;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1==AND))
				{
					alt3 = 1;
				}
				else if ((LA3_1==ANDALSO))
				{
					alt3 = 2;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:51:5: AND e= unary_not_expression
					{
					DebugLocation(51, 5);
					AND6=(CommonToken)Match(input,AND,Follow._AND_in_logical_and_expression222); 
					AND6_tree = (CommonTree)adaptor.Create(AND6);
					adaptor.AddChild(root_0, AND6_tree);
					DebugLocation(51, 10);
					PushFollow(Follow._unary_not_expression_in_logical_and_expression226);
					e=unary_not_expression();
					PopFollow();

					adaptor.AddChild(root_0, e.Tree);
					DebugLocation(52, 5);
					 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.AndBoth); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:53:5: ANDALSO e= unary_not_expression
					{
					DebugLocation(53, 5);
					ANDALSO7=(CommonToken)Match(input,ANDALSO,Follow._ANDALSO_in_logical_and_expression238); 
					ANDALSO7_tree = (CommonTree)adaptor.Create(ANDALSO7);
					adaptor.AddChild(root_0, ANDALSO7_tree);
					DebugLocation(53, 14);
					PushFollow(Follow._unary_not_expression_in_logical_and_expression242);
					e=unary_not_expression();
					PopFollow();

					adaptor.AddChild(root_0, e.Tree);
					DebugLocation(54, 5);
					 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.And); 

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("logical_and_expression", 4);
			LeaveRule("logical_and_expression", 4);
			LeaveRule_logical_and_expression();
		}
		DebugLocation(56, 1);
		} finally { DebugExitRule(GrammarFileName, "logical_and_expression"); }
		return retval;

	}
	// $ANTLR end "logical_and_expression"

	private sealed partial class unary_not_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public unary_not_expression_return(VisualBasicParser grammar) {OnCreated(grammar);}
		partial void OnCreated(VisualBasicParser grammar);
	}

	partial void EnterRule_unary_not_expression();
	partial void LeaveRule_unary_not_expression();
	// $ANTLR start "unary_not_expression"
	// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:58:1: unary_not_expression returns [IAstNode value] : (e= equality_expression | NOT u= unary_not_expression );
	[GrammarRule("unary_not_expression")]
	private VisualBasicParser.unary_not_expression_return unary_not_expression()
	{
		EnterRule_unary_not_expression();
		EnterRule("unary_not_expression", 5);
		TraceIn("unary_not_expression", 5);
		VisualBasicParser.unary_not_expression_return retval = new VisualBasicParser.unary_not_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NOT8 = default(CommonToken);
		VisualBasicParser.equality_expression_return e = default(VisualBasicParser.equality_expression_return);
		VisualBasicParser.unary_not_expression_return u = default(VisualBasicParser.unary_not_expression_return);

		CommonTree NOT8_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "unary_not_expression");
		DebugLocation(58, 1);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:59:2: (e= equality_expression | NOT u= unary_not_expression )
			int alt4=2;
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if (((LA4_1>=CHARACTER_LITERAL && LA4_1<=DIRECTCAST)||(LA4_1>=FALSE && LA4_1<=FLOATING_POINT_LITERAL)||LA4_1==HEX_LITERAL||(LA4_1>=IDENTIFIER && LA4_1<=IIF)||LA4_1==NOTHING||(LA4_1>=STRING_LITERAL && LA4_1<=TRUE)||LA4_1==35||LA4_1==38||LA4_1==40))
			{
				alt4 = 1;
			}
			else if ((LA4_1==NOT))
			{
				alt4 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:59:4: e= equality_expression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(59, 5);
				PushFollow(Follow._equality_expression_in_unary_not_expression270);
				e=equality_expression();
				PopFollow();

				adaptor.AddChild(root_0, e.Tree);
				DebugLocation(59, 26);
				 retval.value = (e!=null?e.value:default(IAstNode)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:60:4: NOT u= unary_not_expression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(60, 4);
				NOT8=(CommonToken)Match(input,NOT,Follow._NOT_in_unary_not_expression277); 
				NOT8_tree = (CommonTree)adaptor.Create(NOT8);
				adaptor.AddChild(root_0, NOT8_tree);
				DebugLocation(60, 9);
				PushFollow(Follow._unary_not_expression_in_unary_not_expression281);
				u=unary_not_expression();
				PopFollow();

				adaptor.AddChild(root_0, u.Tree);
				DebugLocation(60, 31);
				 retval.value = new UnaryExpression((u!=null?u.value:default(IAstNode)), ExpressionType.Not); 

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("unary_not_expression", 5);
			LeaveRule("unary_not_expression", 5);
			LeaveRule_unary_not_expression();
		}
		DebugLocation(61, 1);
		} finally { DebugExitRule(GrammarFileName, "unary_not_expression"); }
		return retval;

	}
	// $ANTLR end "unary_not_expression"

	private sealed partial class equality_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public equality_expression_return(VisualBasicParser grammar) {OnCreated(grammar);}
		partial void OnCreated(VisualBasicParser grammar);
	}

	partial void EnterRule_equality_expression();
	partial void LeaveRule_equality_expression();
	// $ANTLR start "equality_expression"
	// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:63:1: equality_expression returns [IAstNode value] : e= relational_expression ( ( '=' e= relational_expression | '<>' e= relational_expression | IS e= relational_expression ) )* ;
	[GrammarRule("equality_expression")]
	private VisualBasicParser.equality_expression_return equality_expression()
	{
		EnterRule_equality_expression();
		EnterRule("equality_expression", 6);
		TraceIn("equality_expression", 6);
		VisualBasicParser.equality_expression_return retval = new VisualBasicParser.equality_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal9 = default(CommonToken);
		CommonToken string_literal10 = default(CommonToken);
		CommonToken IS11 = default(CommonToken);
		VisualBasicParser.relational_expression_return e = default(VisualBasicParser.relational_expression_return);

		CommonTree char_literal9_tree = default(CommonTree);
		CommonTree string_literal10_tree = default(CommonTree);
		CommonTree IS11_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "equality_expression");
		DebugLocation(63, 1);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:64:2: (e= relational_expression ( ( '=' e= relational_expression | '<>' e= relational_expression | IS e= relational_expression ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:64:4: e= relational_expression ( ( '=' e= relational_expression | '<>' e= relational_expression | IS e= relational_expression ) )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(64, 5);
			PushFollow(Follow._relational_expression_in_equality_expression300);
			e=relational_expression();
			PopFollow();

			adaptor.AddChild(root_0, e.Tree);
			DebugLocation(64, 28);
			 retval.value = (e!=null?e.value:default(IAstNode)); 
			DebugLocation(65, 3);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:65:3: ( ( '=' e= relational_expression | '<>' e= relational_expression | IS e= relational_expression ) )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==IS||(LA6_1>=44 && LA6_1<=45)))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:66:4: ( '=' e= relational_expression | '<>' e= relational_expression | IS e= relational_expression )
					{
					DebugLocation(66, 4);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:66:4: ( '=' e= relational_expression | '<>' e= relational_expression | IS e= relational_expression )
					int alt5=3;
					try { DebugEnterSubRule(5);
					try { DebugEnterDecision(5, false);
					switch (input.LA(1))
					{
					case 45:
						{
						alt5 = 1;
						}
						break;
					case 44:
						{
						alt5 = 2;
						}
						break;
					case IS:
						{
						alt5 = 3;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 5, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:66:6: '=' e= relational_expression
						{
						DebugLocation(66, 6);
						char_literal9=(CommonToken)Match(input,45,Follow._45_in_equality_expression313); 
						char_literal9_tree = (CommonTree)adaptor.Create(char_literal9);
						adaptor.AddChild(root_0, char_literal9_tree);
						DebugLocation(66, 11);
						PushFollow(Follow._relational_expression_in_equality_expression317);
						e=relational_expression();
						PopFollow();

						adaptor.AddChild(root_0, e.Tree);
						DebugLocation(66, 34);
						 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.Compares); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:67:6: '<>' e= relational_expression
						{
						DebugLocation(67, 6);
						string_literal10=(CommonToken)Match(input,44,Follow._44_in_equality_expression326); 
						string_literal10_tree = (CommonTree)adaptor.Create(string_literal10);
						adaptor.AddChild(root_0, string_literal10_tree);
						DebugLocation(67, 12);
						PushFollow(Follow._relational_expression_in_equality_expression330);
						e=relational_expression();
						PopFollow();

						adaptor.AddChild(root_0, e.Tree);
						DebugLocation(67, 35);
						 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.NotCompares); 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:68:6: IS e= relational_expression
						{
						DebugLocation(68, 6);
						IS11=(CommonToken)Match(input,IS,Follow._IS_in_equality_expression339); 
						IS11_tree = (CommonTree)adaptor.Create(IS11);
						adaptor.AddChild(root_0, IS11_tree);
						DebugLocation(68, 10);
						PushFollow(Follow._relational_expression_in_equality_expression343);
						e=relational_expression();
						PopFollow();

						adaptor.AddChild(root_0, e.Tree);
						DebugLocation(68, 33);
						 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.Equals); 

						}
						break;

					}
					} finally { DebugExitSubRule(5); }


					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("equality_expression", 6);
			LeaveRule("equality_expression", 6);
			LeaveRule_equality_expression();
		}
		DebugLocation(71, 1);
		} finally { DebugExitRule(GrammarFileName, "equality_expression"); }
		return retval;

	}
	// $ANTLR end "equality_expression"

	private sealed partial class relational_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public relational_expression_return(VisualBasicParser grammar) {OnCreated(grammar);}
		partial void OnCreated(VisualBasicParser grammar);
	}

	partial void EnterRule_relational_expression();
	partial void LeaveRule_relational_expression();
	// $ANTLR start "relational_expression"
	// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:73:1: relational_expression returns [IAstNode value] : e= additive_expression ( ( '<' e= additive_expression | '>' e= additive_expression | '<=' e= additive_expression | '>=' e= additive_expression ) )* ;
	[GrammarRule("relational_expression")]
	private VisualBasicParser.relational_expression_return relational_expression()
	{
		EnterRule_relational_expression();
		EnterRule("relational_expression", 7);
		TraceIn("relational_expression", 7);
		VisualBasicParser.relational_expression_return retval = new VisualBasicParser.relational_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal12 = default(CommonToken);
		CommonToken char_literal13 = default(CommonToken);
		CommonToken string_literal14 = default(CommonToken);
		CommonToken string_literal15 = default(CommonToken);
		VisualBasicParser.additive_expression_return e = default(VisualBasicParser.additive_expression_return);

		CommonTree char_literal12_tree = default(CommonTree);
		CommonTree char_literal13_tree = default(CommonTree);
		CommonTree string_literal14_tree = default(CommonTree);
		CommonTree string_literal15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "relational_expression");
		DebugLocation(73, 1);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:74:2: (e= additive_expression ( ( '<' e= additive_expression | '>' e= additive_expression | '<=' e= additive_expression | '>=' e= additive_expression ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:74:4: e= additive_expression ( ( '<' e= additive_expression | '>' e= additive_expression | '<=' e= additive_expression | '>=' e= additive_expression ) )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(74, 5);
			PushFollow(Follow._additive_expression_in_relational_expression372);
			e=additive_expression();
			PopFollow();

			adaptor.AddChild(root_0, e.Tree);
			DebugLocation(74, 26);
			 retval.value = (e!=null?e.value:default(IAstNode)); 
			DebugLocation(75, 3);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:75:3: ( ( '<' e= additive_expression | '>' e= additive_expression | '<=' e= additive_expression | '>=' e= additive_expression ) )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if (((LA8_1>=42 && LA8_1<=43)||(LA8_1>=46 && LA8_1<=47)))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:76:4: ( '<' e= additive_expression | '>' e= additive_expression | '<=' e= additive_expression | '>=' e= additive_expression )
					{
					DebugLocation(76, 4);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:76:4: ( '<' e= additive_expression | '>' e= additive_expression | '<=' e= additive_expression | '>=' e= additive_expression )
					int alt7=4;
					try { DebugEnterSubRule(7);
					try { DebugEnterDecision(7, false);
					switch (input.LA(1))
					{
					case 42:
						{
						alt7 = 1;
						}
						break;
					case 46:
						{
						alt7 = 2;
						}
						break;
					case 43:
						{
						alt7 = 3;
						}
						break;
					case 47:
						{
						alt7 = 4;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(7); }
					switch (alt7)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:76:6: '<' e= additive_expression
						{
						DebugLocation(76, 6);
						char_literal12=(CommonToken)Match(input,42,Follow._42_in_relational_expression385); 
						char_literal12_tree = (CommonTree)adaptor.Create(char_literal12);
						adaptor.AddChild(root_0, char_literal12_tree);
						DebugLocation(76, 11);
						PushFollow(Follow._additive_expression_in_relational_expression389);
						e=additive_expression();
						PopFollow();

						adaptor.AddChild(root_0, e.Tree);
						DebugLocation(76, 32);
						 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.Less); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:77:6: '>' e= additive_expression
						{
						DebugLocation(77, 6);
						char_literal13=(CommonToken)Match(input,46,Follow._46_in_relational_expression398); 
						char_literal13_tree = (CommonTree)adaptor.Create(char_literal13);
						adaptor.AddChild(root_0, char_literal13_tree);
						DebugLocation(77, 11);
						PushFollow(Follow._additive_expression_in_relational_expression402);
						e=additive_expression();
						PopFollow();

						adaptor.AddChild(root_0, e.Tree);
						DebugLocation(77, 32);
						 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.Greater); 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:78:6: '<=' e= additive_expression
						{
						DebugLocation(78, 6);
						string_literal14=(CommonToken)Match(input,43,Follow._43_in_relational_expression411); 
						string_literal14_tree = (CommonTree)adaptor.Create(string_literal14);
						adaptor.AddChild(root_0, string_literal14_tree);
						DebugLocation(78, 12);
						PushFollow(Follow._additive_expression_in_relational_expression415);
						e=additive_expression();
						PopFollow();

						adaptor.AddChild(root_0, e.Tree);
						DebugLocation(78, 33);
						 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.LessOrEquals); 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:79:6: '>=' e= additive_expression
						{
						DebugLocation(79, 6);
						string_literal15=(CommonToken)Match(input,47,Follow._47_in_relational_expression424); 
						string_literal15_tree = (CommonTree)adaptor.Create(string_literal15);
						adaptor.AddChild(root_0, string_literal15_tree);
						DebugLocation(79, 12);
						PushFollow(Follow._additive_expression_in_relational_expression428);
						e=additive_expression();
						PopFollow();

						adaptor.AddChild(root_0, e.Tree);
						DebugLocation(79, 33);
						 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.GreaterOrEquals); 

						}
						break;

					}
					} finally { DebugExitSubRule(7); }


					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("relational_expression", 7);
			LeaveRule("relational_expression", 7);
			LeaveRule_relational_expression();
		}
		DebugLocation(82, 1);
		} finally { DebugExitRule(GrammarFileName, "relational_expression"); }
		return retval;

	}
	// $ANTLR end "relational_expression"

	private sealed partial class additive_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public additive_expression_return(VisualBasicParser grammar) {OnCreated(grammar);}
		partial void OnCreated(VisualBasicParser grammar);
	}

	partial void EnterRule_additive_expression();
	partial void LeaveRule_additive_expression();
	// $ANTLR start "additive_expression"
	// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:84:1: additive_expression returns [IAstNode value] : e= multiplicative_expression ( '+' e= multiplicative_expression | '-' e= multiplicative_expression | '&' e= multiplicative_expression )* ;
	[GrammarRule("additive_expression")]
	private VisualBasicParser.additive_expression_return additive_expression()
	{
		EnterRule_additive_expression();
		EnterRule("additive_expression", 8);
		TraceIn("additive_expression", 8);
		VisualBasicParser.additive_expression_return retval = new VisualBasicParser.additive_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal16 = default(CommonToken);
		CommonToken char_literal17 = default(CommonToken);
		CommonToken char_literal18 = default(CommonToken);
		VisualBasicParser.multiplicative_expression_return e = default(VisualBasicParser.multiplicative_expression_return);

		CommonTree char_literal16_tree = default(CommonTree);
		CommonTree char_literal17_tree = default(CommonTree);
		CommonTree char_literal18_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "additive_expression");
		DebugLocation(84, 1);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:85:2: (e= multiplicative_expression ( '+' e= multiplicative_expression | '-' e= multiplicative_expression | '&' e= multiplicative_expression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:85:4: e= multiplicative_expression ( '+' e= multiplicative_expression | '-' e= multiplicative_expression | '&' e= multiplicative_expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(85, 5);
			PushFollow(Follow._multiplicative_expression_in_additive_expression457);
			e=multiplicative_expression();
			PopFollow();

			adaptor.AddChild(root_0, e.Tree);
			DebugLocation(85, 32);
			 retval.value = (e!=null?e.value:default(IAstNode)); 
			DebugLocation(86, 3);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:86:3: ( '+' e= multiplicative_expression | '-' e= multiplicative_expression | '&' e= multiplicative_expression )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=4;
				try { DebugEnterDecision(9, false);
				switch (input.LA(1))
				{
				case 38:
					{
					alt9 = 1;
					}
					break;
				case 40:
					{
					alt9 = 2;
					}
					break;
				case 34:
					{
					alt9 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:86:5: '+' e= multiplicative_expression
					{
					DebugLocation(86, 5);
					char_literal16=(CommonToken)Match(input,38,Follow._38_in_additive_expression465); 
					char_literal16_tree = (CommonTree)adaptor.Create(char_literal16);
					adaptor.AddChild(root_0, char_literal16_tree);
					DebugLocation(86, 10);
					PushFollow(Follow._multiplicative_expression_in_additive_expression469);
					e=multiplicative_expression();
					PopFollow();

					adaptor.AddChild(root_0, e.Tree);
					DebugLocation(86, 37);
					 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.Add); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:87:5: '-' e= multiplicative_expression
					{
					DebugLocation(87, 5);
					char_literal17=(CommonToken)Match(input,40,Follow._40_in_additive_expression477); 
					char_literal17_tree = (CommonTree)adaptor.Create(char_literal17);
					adaptor.AddChild(root_0, char_literal17_tree);
					DebugLocation(87, 10);
					PushFollow(Follow._multiplicative_expression_in_additive_expression481);
					e=multiplicative_expression();
					PopFollow();

					adaptor.AddChild(root_0, e.Tree);
					DebugLocation(87, 37);
					 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.Subtract); 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:88:5: '&' e= multiplicative_expression
					{
					DebugLocation(88, 5);
					char_literal18=(CommonToken)Match(input,34,Follow._34_in_additive_expression489); 
					char_literal18_tree = (CommonTree)adaptor.Create(char_literal18);
					adaptor.AddChild(root_0, char_literal18_tree);
					DebugLocation(88, 10);
					PushFollow(Follow._multiplicative_expression_in_additive_expression493);
					e=multiplicative_expression();
					PopFollow();

					adaptor.AddChild(root_0, e.Tree);
					DebugLocation(88, 37);
					 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.Concat); 

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("additive_expression", 8);
			LeaveRule("additive_expression", 8);
			LeaveRule_additive_expression();
		}
		DebugLocation(90, 1);
		} finally { DebugExitRule(GrammarFileName, "additive_expression"); }
		return retval;

	}
	// $ANTLR end "additive_expression"

	private sealed partial class multiplicative_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public multiplicative_expression_return(VisualBasicParser grammar) {OnCreated(grammar);}
		partial void OnCreated(VisualBasicParser grammar);
	}

	partial void EnterRule_multiplicative_expression();
	partial void LeaveRule_multiplicative_expression();
	// $ANTLR start "multiplicative_expression"
	// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:92:1: multiplicative_expression returns [IAstNode value] : e= power_expression ( '*' e= power_expression | '/' e= power_expression | '%' e= power_expression )* ;
	[GrammarRule("multiplicative_expression")]
	private VisualBasicParser.multiplicative_expression_return multiplicative_expression()
	{
		EnterRule_multiplicative_expression();
		EnterRule("multiplicative_expression", 9);
		TraceIn("multiplicative_expression", 9);
		VisualBasicParser.multiplicative_expression_return retval = new VisualBasicParser.multiplicative_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal19 = default(CommonToken);
		CommonToken char_literal20 = default(CommonToken);
		CommonToken char_literal21 = default(CommonToken);
		VisualBasicParser.power_expression_return e = default(VisualBasicParser.power_expression_return);

		CommonTree char_literal19_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal21_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "multiplicative_expression");
		DebugLocation(92, 1);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:93:2: (e= power_expression ( '*' e= power_expression | '/' e= power_expression | '%' e= power_expression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:93:4: e= power_expression ( '*' e= power_expression | '/' e= power_expression | '%' e= power_expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(93, 5);
			PushFollow(Follow._power_expression_in_multiplicative_expression517);
			e=power_expression();
			PopFollow();

			adaptor.AddChild(root_0, e.Tree);
			DebugLocation(93, 23);
			 retval.value = (e!=null?e.value:default(IAstNode)); 
			DebugLocation(94, 3);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:94:3: ( '*' e= power_expression | '/' e= power_expression | '%' e= power_expression )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=4;
				try { DebugEnterDecision(10, false);
				switch (input.LA(1))
				{
				case 37:
					{
					alt10 = 1;
					}
					break;
				case 41:
					{
					alt10 = 2;
					}
					break;
				case 33:
					{
					alt10 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:94:5: '*' e= power_expression
					{
					DebugLocation(94, 5);
					char_literal19=(CommonToken)Match(input,37,Follow._37_in_multiplicative_expression525); 
					char_literal19_tree = (CommonTree)adaptor.Create(char_literal19);
					adaptor.AddChild(root_0, char_literal19_tree);
					DebugLocation(94, 10);
					PushFollow(Follow._power_expression_in_multiplicative_expression529);
					e=power_expression();
					PopFollow();

					adaptor.AddChild(root_0, e.Tree);
					DebugLocation(94, 28);
					 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.Multiply); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:95:5: '/' e= power_expression
					{
					DebugLocation(95, 5);
					char_literal20=(CommonToken)Match(input,41,Follow._41_in_multiplicative_expression537); 
					char_literal20_tree = (CommonTree)adaptor.Create(char_literal20);
					adaptor.AddChild(root_0, char_literal20_tree);
					DebugLocation(95, 10);
					PushFollow(Follow._power_expression_in_multiplicative_expression541);
					e=power_expression();
					PopFollow();

					adaptor.AddChild(root_0, e.Tree);
					DebugLocation(95, 28);
					 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.Divide); 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:96:5: '%' e= power_expression
					{
					DebugLocation(96, 5);
					char_literal21=(CommonToken)Match(input,33,Follow._33_in_multiplicative_expression549); 
					char_literal21_tree = (CommonTree)adaptor.Create(char_literal21);
					adaptor.AddChild(root_0, char_literal21_tree);
					DebugLocation(96, 10);
					PushFollow(Follow._power_expression_in_multiplicative_expression553);
					e=power_expression();
					PopFollow();

					adaptor.AddChild(root_0, e.Tree);
					DebugLocation(96, 28);
					 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.Modulo); 

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("multiplicative_expression", 9);
			LeaveRule("multiplicative_expression", 9);
			LeaveRule_multiplicative_expression();
		}
		DebugLocation(98, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicative_expression"); }
		return retval;

	}
	// $ANTLR end "multiplicative_expression"

	private sealed partial class power_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public power_expression_return(VisualBasicParser grammar) {OnCreated(grammar);}
		partial void OnCreated(VisualBasicParser grammar);
	}

	partial void EnterRule_power_expression();
	partial void LeaveRule_power_expression();
	// $ANTLR start "power_expression"
	// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:100:1: power_expression returns [IAstNode value] : e= cast_expression ( '^' e= cast_expression )* ;
	[GrammarRule("power_expression")]
	private VisualBasicParser.power_expression_return power_expression()
	{
		EnterRule_power_expression();
		EnterRule("power_expression", 10);
		TraceIn("power_expression", 10);
		VisualBasicParser.power_expression_return retval = new VisualBasicParser.power_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal22 = default(CommonToken);
		VisualBasicParser.cast_expression_return e = default(VisualBasicParser.cast_expression_return);

		CommonTree char_literal22_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "power_expression");
		DebugLocation(100, 1);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:101:2: (e= cast_expression ( '^' e= cast_expression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:101:4: e= cast_expression ( '^' e= cast_expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(101, 5);
			PushFollow(Follow._cast_expression_in_power_expression577);
			e=cast_expression();
			PopFollow();

			adaptor.AddChild(root_0, e.Tree);
			DebugLocation(101, 22);
			 retval.value = (e!=null?e.value:default(IAstNode)); 
			DebugLocation(102, 3);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:102:3: ( '^' e= cast_expression )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==48))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:102:5: '^' e= cast_expression
					{
					DebugLocation(102, 5);
					char_literal22=(CommonToken)Match(input,48,Follow._48_in_power_expression585); 
					char_literal22_tree = (CommonTree)adaptor.Create(char_literal22);
					adaptor.AddChild(root_0, char_literal22_tree);
					DebugLocation(102, 10);
					PushFollow(Follow._cast_expression_in_power_expression589);
					e=cast_expression();
					PopFollow();

					adaptor.AddChild(root_0, e.Tree);
					DebugLocation(102, 27);
					 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.Power); 

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("power_expression", 10);
			LeaveRule("power_expression", 10);
			LeaveRule_power_expression();
		}
		DebugLocation(104, 1);
		} finally { DebugExitRule(GrammarFileName, "power_expression"); }
		return retval;

	}
	// $ANTLR end "power_expression"

	private sealed partial class cast_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public cast_expression_return(VisualBasicParser grammar) {OnCreated(grammar);}
		partial void OnCreated(VisualBasicParser grammar);
	}

	partial void EnterRule_cast_expression();
	partial void LeaveRule_cast_expression();
	// $ANTLR start "cast_expression"
	// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:106:1: cast_expression returns [IAstNode value] : ( CTYPE '(' e= expression ',' t= type_expression ')' | DIRECTCAST '(' e= expression ',' t= type_expression ')' |u= if_expression );
	[GrammarRule("cast_expression")]
	private VisualBasicParser.cast_expression_return cast_expression()
	{
		EnterRule_cast_expression();
		EnterRule("cast_expression", 11);
		TraceIn("cast_expression", 11);
		VisualBasicParser.cast_expression_return retval = new VisualBasicParser.cast_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CTYPE23 = default(CommonToken);
		CommonToken char_literal24 = default(CommonToken);
		CommonToken char_literal25 = default(CommonToken);
		CommonToken char_literal26 = default(CommonToken);
		CommonToken DIRECTCAST27 = default(CommonToken);
		CommonToken char_literal28 = default(CommonToken);
		CommonToken char_literal29 = default(CommonToken);
		CommonToken char_literal30 = default(CommonToken);
		VisualBasicParser.expression_return e = default(VisualBasicParser.expression_return);
		VisualBasicParser.type_expression_return t = default(VisualBasicParser.type_expression_return);
		VisualBasicParser.if_expression_return u = default(VisualBasicParser.if_expression_return);

		CommonTree CTYPE23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal25_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree DIRECTCAST27_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal30_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cast_expression");
		DebugLocation(106, 1);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:107:2: ( CTYPE '(' e= expression ',' t= type_expression ')' | DIRECTCAST '(' e= expression ',' t= type_expression ')' |u= if_expression )
			int alt12=3;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case CTYPE:
				{
				alt12 = 1;
				}
				break;
			case DIRECTCAST:
				{
				alt12 = 2;
				}
				break;
			case CHARACTER_LITERAL:
			case DATETIME_LITERAL:
			case DECIMAL_LITERAL:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENTIFIER:
			case IIF:
			case NOTHING:
			case STRING_LITERAL:
			case TIMESPAN_LITERAL:
			case TRUE:
			case 35:
			case 38:
			case 40:
				{
				alt12 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:107:4: CTYPE '(' e= expression ',' t= type_expression ')'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(107, 4);
				CTYPE23=(CommonToken)Match(input,CTYPE,Follow._CTYPE_in_cast_expression611); 
				CTYPE23_tree = (CommonTree)adaptor.Create(CTYPE23);
				adaptor.AddChild(root_0, CTYPE23_tree);
				DebugLocation(107, 10);
				char_literal24=(CommonToken)Match(input,35,Follow._35_in_cast_expression613); 
				char_literal24_tree = (CommonTree)adaptor.Create(char_literal24);
				adaptor.AddChild(root_0, char_literal24_tree);
				DebugLocation(107, 15);
				PushFollow(Follow._expression_in_cast_expression617);
				e=expression();
				PopFollow();

				adaptor.AddChild(root_0, e.Tree);
				DebugLocation(107, 27);
				char_literal25=(CommonToken)Match(input,39,Follow._39_in_cast_expression619); 
				char_literal25_tree = (CommonTree)adaptor.Create(char_literal25);
				adaptor.AddChild(root_0, char_literal25_tree);
				DebugLocation(107, 32);
				PushFollow(Follow._type_expression_in_cast_expression623);
				t=type_expression();
				PopFollow();

				adaptor.AddChild(root_0, t.Tree);
				DebugLocation(107, 49);
				char_literal26=(CommonToken)Match(input,36,Follow._36_in_cast_expression625); 
				char_literal26_tree = (CommonTree)adaptor.Create(char_literal26);
				adaptor.AddChild(root_0, char_literal26_tree);
				DebugLocation(107, 53);
				 retval.value = new Cast((e!=null?e.value:default(IAstNode)), (t!=null?t.value:default(TypeIdentifier)), CastType.Convert); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:108:4: DIRECTCAST '(' e= expression ',' t= type_expression ')'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(108, 4);
				DIRECTCAST27=(CommonToken)Match(input,DIRECTCAST,Follow._DIRECTCAST_in_cast_expression632); 
				DIRECTCAST27_tree = (CommonTree)adaptor.Create(DIRECTCAST27);
				adaptor.AddChild(root_0, DIRECTCAST27_tree);
				DebugLocation(108, 15);
				char_literal28=(CommonToken)Match(input,35,Follow._35_in_cast_expression634); 
				char_literal28_tree = (CommonTree)adaptor.Create(char_literal28);
				adaptor.AddChild(root_0, char_literal28_tree);
				DebugLocation(108, 20);
				PushFollow(Follow._expression_in_cast_expression638);
				e=expression();
				PopFollow();

				adaptor.AddChild(root_0, e.Tree);
				DebugLocation(108, 32);
				char_literal29=(CommonToken)Match(input,39,Follow._39_in_cast_expression640); 
				char_literal29_tree = (CommonTree)adaptor.Create(char_literal29);
				adaptor.AddChild(root_0, char_literal29_tree);
				DebugLocation(108, 37);
				PushFollow(Follow._type_expression_in_cast_expression644);
				t=type_expression();
				PopFollow();

				adaptor.AddChild(root_0, t.Tree);
				DebugLocation(108, 54);
				char_literal30=(CommonToken)Match(input,36,Follow._36_in_cast_expression646); 
				char_literal30_tree = (CommonTree)adaptor.Create(char_literal30);
				adaptor.AddChild(root_0, char_literal30_tree);
				DebugLocation(108, 58);
				 retval.value = new Cast((e!=null?e.value:default(IAstNode)), (t!=null?t.value:default(TypeIdentifier)), CastType.Cast); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:109:4: u= if_expression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(109, 5);
				PushFollow(Follow._if_expression_in_cast_expression655);
				u=if_expression();
				PopFollow();

				adaptor.AddChild(root_0, u.Tree);
				DebugLocation(109, 20);
				 retval.value = (u!=null?u.value:default(IAstNode)); 

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("cast_expression", 11);
			LeaveRule("cast_expression", 11);
			LeaveRule_cast_expression();
		}
		DebugLocation(110, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expression"); }
		return retval;

	}
	// $ANTLR end "cast_expression"

	private sealed partial class type_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public TypeIdentifier value;
		public type_expression_return(VisualBasicParser grammar) {OnCreated(grammar);}
		partial void OnCreated(VisualBasicParser grammar);
	}

	partial void EnterRule_type_expression();
	partial void LeaveRule_type_expression();
	// $ANTLR start "type_expression"
	// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:112:1: type_expression returns [TypeIdentifier value] : e= type_identifier ( '(' ( ',' )* ')' )? ;
	[GrammarRule("type_expression")]
	private VisualBasicParser.type_expression_return type_expression()
	{
		EnterRule_type_expression();
		EnterRule("type_expression", 12);
		TraceIn("type_expression", 12);
		VisualBasicParser.type_expression_return retval = new VisualBasicParser.type_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal31 = default(CommonToken);
		CommonToken char_literal32 = default(CommonToken);
		CommonToken char_literal33 = default(CommonToken);
		VisualBasicParser.type_identifier_return e = default(VisualBasicParser.type_identifier_return);

		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal32_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_expression");
		DebugLocation(112, 1);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:113:2: (e= type_identifier ( '(' ( ',' )* ')' )? )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:113:4: e= type_identifier ( '(' ( ',' )* ')' )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(113, 5);
			PushFollow(Follow._type_identifier_in_type_expression674);
			e=type_identifier();
			PopFollow();

			adaptor.AddChild(root_0, e.Tree);
			DebugLocation(113, 22);
			 retval.value = new TypeIdentifier((e!=null?e.value:default(string)), 0); 
			DebugLocation(114, 3);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:114:3: ( '(' ( ',' )* ')' )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_1 = input.LA(1);

			if ((LA14_1==35))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:115:4: '(' ( ',' )* ')'
				{
				DebugLocation(115, 4);
				char_literal31=(CommonToken)Match(input,35,Follow._35_in_type_expression685); 
				char_literal31_tree = (CommonTree)adaptor.Create(char_literal31);
				adaptor.AddChild(root_0, char_literal31_tree);
				DebugLocation(115, 8);
				 retval.value = new TypeIdentifier(retval.value.Name, 1); 
				DebugLocation(116, 5);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:116:5: ( ',' )*
				try { DebugEnterSubRule(13);
				while (true)
				{
					int alt13=2;
					try { DebugEnterDecision(13, false);
					int LA13_1 = input.LA(1);

					if ((LA13_1==39))
					{
						alt13 = 1;
					}


					} finally { DebugExitDecision(13); }
					switch ( alt13 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:116:7: ','
						{
						DebugLocation(116, 7);
						char_literal32=(CommonToken)Match(input,39,Follow._39_in_type_expression695); 
						char_literal32_tree = (CommonTree)adaptor.Create(char_literal32);
						adaptor.AddChild(root_0, char_literal32_tree);
						DebugLocation(116, 11);
						 retval.value = new TypeIdentifier(retval.value.Name, retval.value.ArrayIndex + 1); 

						}
						break;

					default:
						goto loop13;
					}
				}

				loop13:
					;

				} finally { DebugExitSubRule(13); }

				DebugLocation(118, 4);
				char_literal33=(CommonToken)Match(input,36,Follow._36_in_type_expression709); 
				char_literal33_tree = (CommonTree)adaptor.Create(char_literal33);
				adaptor.AddChild(root_0, char_literal33_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("type_expression", 12);
			LeaveRule("type_expression", 12);
			LeaveRule_type_expression();
		}
		DebugLocation(120, 1);
		} finally { DebugExitRule(GrammarFileName, "type_expression"); }
		return retval;

	}
	// $ANTLR end "type_expression"

	private sealed partial class type_identifier_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public string value;
		public type_identifier_return(VisualBasicParser grammar) {OnCreated(grammar);}
		partial void OnCreated(VisualBasicParser grammar);
	}

	partial void EnterRule_type_identifier();
	partial void LeaveRule_type_identifier();
	// $ANTLR start "type_identifier"
	// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:122:1: type_identifier returns [string value] : e= IDENTIFIER ( DOT e= IDENTIFIER )* ;
	[GrammarRule("type_identifier")]
	private VisualBasicParser.type_identifier_return type_identifier()
	{
		EnterRule_type_identifier();
		EnterRule("type_identifier", 13);
		TraceIn("type_identifier", 13);
		VisualBasicParser.type_identifier_return retval = new VisualBasicParser.type_identifier_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken e = default(CommonToken);
		CommonToken DOT34 = default(CommonToken);

		CommonTree e_tree = default(CommonTree);
		CommonTree DOT34_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_identifier");
		DebugLocation(122, 1);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:123:2: (e= IDENTIFIER ( DOT e= IDENTIFIER )* )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:123:4: e= IDENTIFIER ( DOT e= IDENTIFIER )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(123, 5);
			e=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_type_identifier731); 
			e_tree = (CommonTree)adaptor.Create(e);
			adaptor.AddChild(root_0, e_tree);
			DebugLocation(123, 17);
			 retval.value = (e!=null?e.Text:null); 
			DebugLocation(123, 39);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:123:39: ( DOT e= IDENTIFIER )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_1 = input.LA(1);

				if ((LA15_1==DOT))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:123:41: DOT e= IDENTIFIER
					{
					DebugLocation(123, 41);
					DOT34=(CommonToken)Match(input,DOT,Follow._DOT_in_type_identifier737); 
					DOT34_tree = (CommonTree)adaptor.Create(DOT34);
					adaptor.AddChild(root_0, DOT34_tree);
					DebugLocation(123, 46);
					e=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_type_identifier741); 
					e_tree = (CommonTree)adaptor.Create(e);
					adaptor.AddChild(root_0, e_tree);
					DebugLocation(123, 58);
					 retval.value = retval.value + "." + (e!=null?e.Text:null); 

					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("type_identifier", 13);
			LeaveRule("type_identifier", 13);
			LeaveRule_type_identifier();
		}
		DebugLocation(124, 1);
		} finally { DebugExitRule(GrammarFileName, "type_identifier"); }
		return retval;

	}
	// $ANTLR end "type_identifier"

	private sealed partial class if_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public if_expression_return(VisualBasicParser grammar) {OnCreated(grammar);}
		partial void OnCreated(VisualBasicParser grammar);
	}

	partial void EnterRule_if_expression();
	partial void LeaveRule_if_expression();
	// $ANTLR start "if_expression"
	// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:126:1: if_expression returns [IAstNode value] : ( IIF '(' e= expression ',' t= expression ',' l= expression ')' |u= unary_expression );
	[GrammarRule("if_expression")]
	private VisualBasicParser.if_expression_return if_expression()
	{
		EnterRule_if_expression();
		EnterRule("if_expression", 14);
		TraceIn("if_expression", 14);
		VisualBasicParser.if_expression_return retval = new VisualBasicParser.if_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken IIF35 = default(CommonToken);
		CommonToken char_literal36 = default(CommonToken);
		CommonToken char_literal37 = default(CommonToken);
		CommonToken char_literal38 = default(CommonToken);
		CommonToken char_literal39 = default(CommonToken);
		VisualBasicParser.expression_return e = default(VisualBasicParser.expression_return);
		VisualBasicParser.expression_return t = default(VisualBasicParser.expression_return);
		VisualBasicParser.expression_return l = default(VisualBasicParser.expression_return);
		VisualBasicParser.unary_expression_return u = default(VisualBasicParser.unary_expression_return);

		CommonTree IIF35_tree = default(CommonTree);
		CommonTree char_literal36_tree = default(CommonTree);
		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal38_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "if_expression");
		DebugLocation(126, 1);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:127:2: ( IIF '(' e= expression ',' t= expression ',' l= expression ')' |u= unary_expression )
			int alt16=2;
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1==IIF))
			{
				alt16 = 1;
			}
			else if ((LA16_1==CHARACTER_LITERAL||(LA16_1>=DATETIME_LITERAL && LA16_1<=DECIMAL_LITERAL)||(LA16_1>=FALSE && LA16_1<=FLOATING_POINT_LITERAL)||LA16_1==HEX_LITERAL||LA16_1==IDENTIFIER||LA16_1==NOTHING||(LA16_1>=STRING_LITERAL && LA16_1<=TRUE)||LA16_1==35||LA16_1==38||LA16_1==40))
			{
				alt16 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:127:4: IIF '(' e= expression ',' t= expression ',' l= expression ')'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(127, 4);
				IIF35=(CommonToken)Match(input,IIF,Follow._IIF_in_if_expression761); 
				IIF35_tree = (CommonTree)adaptor.Create(IIF35);
				adaptor.AddChild(root_0, IIF35_tree);
				DebugLocation(127, 8);
				char_literal36=(CommonToken)Match(input,35,Follow._35_in_if_expression763); 
				char_literal36_tree = (CommonTree)adaptor.Create(char_literal36);
				adaptor.AddChild(root_0, char_literal36_tree);
				DebugLocation(127, 13);
				PushFollow(Follow._expression_in_if_expression767);
				e=expression();
				PopFollow();

				adaptor.AddChild(root_0, e.Tree);
				DebugLocation(127, 25);
				char_literal37=(CommonToken)Match(input,39,Follow._39_in_if_expression769); 
				char_literal37_tree = (CommonTree)adaptor.Create(char_literal37);
				adaptor.AddChild(root_0, char_literal37_tree);
				DebugLocation(127, 30);
				PushFollow(Follow._expression_in_if_expression773);
				t=expression();
				PopFollow();

				adaptor.AddChild(root_0, t.Tree);
				DebugLocation(127, 42);
				char_literal38=(CommonToken)Match(input,39,Follow._39_in_if_expression775); 
				char_literal38_tree = (CommonTree)adaptor.Create(char_literal38);
				adaptor.AddChild(root_0, char_literal38_tree);
				DebugLocation(127, 47);
				PushFollow(Follow._expression_in_if_expression779);
				l=expression();
				PopFollow();

				adaptor.AddChild(root_0, l.Tree);
				DebugLocation(127, 59);
				char_literal39=(CommonToken)Match(input,36,Follow._36_in_if_expression781); 
				char_literal39_tree = (CommonTree)adaptor.Create(char_literal39);
				adaptor.AddChild(root_0, char_literal39_tree);
				DebugLocation(127, 63);
				 retval.value = new Conditional((e!=null?e.value:default(IAstNode)), (t!=null?t.value:default(IAstNode)), (l!=null?l.value:default(IAstNode))); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:128:4: u= unary_expression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(128, 5);
				PushFollow(Follow._unary_expression_in_if_expression790);
				u=unary_expression();
				PopFollow();

				adaptor.AddChild(root_0, u.Tree);
				DebugLocation(128, 23);
				 retval.value = (u!=null?u.value:default(IAstNode)); 

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("if_expression", 14);
			LeaveRule("if_expression", 14);
			LeaveRule_if_expression();
		}
		DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "if_expression"); }
		return retval;

	}
	// $ANTLR end "if_expression"

	private sealed partial class unary_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public unary_expression_return(VisualBasicParser grammar) {OnCreated(grammar);}
		partial void OnCreated(VisualBasicParser grammar);
	}

	partial void EnterRule_unary_expression();
	partial void LeaveRule_unary_expression();
	// $ANTLR start "unary_expression"
	// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:131:1: unary_expression returns [IAstNode value] : (p= postfix_expression | ( '+' e= cast_expression | '-' e= cast_expression ) );
	[GrammarRule("unary_expression")]
	private VisualBasicParser.unary_expression_return unary_expression()
	{
		EnterRule_unary_expression();
		EnterRule("unary_expression", 15);
		TraceIn("unary_expression", 15);
		VisualBasicParser.unary_expression_return retval = new VisualBasicParser.unary_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal40 = default(CommonToken);
		CommonToken char_literal41 = default(CommonToken);
		VisualBasicParser.postfix_expression_return p = default(VisualBasicParser.postfix_expression_return);
		VisualBasicParser.cast_expression_return e = default(VisualBasicParser.cast_expression_return);

		CommonTree char_literal40_tree = default(CommonTree);
		CommonTree char_literal41_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "unary_expression");
		DebugLocation(131, 1);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:132:2: (p= postfix_expression | ( '+' e= cast_expression | '-' e= cast_expression ) )
			int alt18=2;
			try { DebugEnterDecision(18, false);
			int LA18_1 = input.LA(1);

			if ((LA18_1==CHARACTER_LITERAL||(LA18_1>=DATETIME_LITERAL && LA18_1<=DECIMAL_LITERAL)||(LA18_1>=FALSE && LA18_1<=FLOATING_POINT_LITERAL)||LA18_1==HEX_LITERAL||LA18_1==IDENTIFIER||LA18_1==NOTHING||(LA18_1>=STRING_LITERAL && LA18_1<=TRUE)||LA18_1==35))
			{
				alt18 = 1;
			}
			else if ((LA18_1==38||LA18_1==40))
			{
				alt18 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:132:4: p= postfix_expression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(132, 5);
				PushFollow(Follow._postfix_expression_in_unary_expression809);
				p=postfix_expression();
				PopFollow();

				adaptor.AddChild(root_0, p.Tree);
				DebugLocation(132, 25);
				 retval.value = (p!=null?p.value:default(IAstNode)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:134:3: ( '+' e= cast_expression | '-' e= cast_expression )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(134, 3);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:134:3: ( '+' e= cast_expression | '-' e= cast_expression )
				int alt17=2;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if ((LA17_1==38))
				{
					alt17 = 1;
				}
				else if ((LA17_1==40))
				{
					alt17 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:134:5: '+' e= cast_expression
					{
					DebugLocation(134, 5);
					char_literal40=(CommonToken)Match(input,38,Follow._38_in_unary_expression820); 
					char_literal40_tree = (CommonTree)adaptor.Create(char_literal40);
					adaptor.AddChild(root_0, char_literal40_tree);
					DebugLocation(134, 10);
					PushFollow(Follow._cast_expression_in_unary_expression824);
					e=cast_expression();
					PopFollow();

					adaptor.AddChild(root_0, e.Tree);
					DebugLocation(134, 27);
					 retval.value = new UnaryExpression((e!=null?e.value:default(IAstNode)), ExpressionType.Plus); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:135:5: '-' e= cast_expression
					{
					DebugLocation(135, 5);
					char_literal41=(CommonToken)Match(input,40,Follow._40_in_unary_expression832); 
					char_literal41_tree = (CommonTree)adaptor.Create(char_literal41);
					adaptor.AddChild(root_0, char_literal41_tree);
					DebugLocation(135, 10);
					PushFollow(Follow._cast_expression_in_unary_expression836);
					e=cast_expression();
					PopFollow();

					adaptor.AddChild(root_0, e.Tree);
					DebugLocation(135, 27);
					 retval.value = new UnaryExpression((e!=null?e.value:default(IAstNode)), ExpressionType.Minus); 

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("unary_expression", 15);
			LeaveRule("unary_expression", 15);
			LeaveRule_unary_expression();
		}
		DebugLocation(137, 1);
		} finally { DebugExitRule(GrammarFileName, "unary_expression"); }
		return retval;

	}
	// $ANTLR end "unary_expression"

	private sealed partial class argument_expression_list_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public AstNodeCollection value;
		public argument_expression_list_return(VisualBasicParser grammar) {OnCreated(grammar);}
		partial void OnCreated(VisualBasicParser grammar);
	}

	partial void EnterRule_argument_expression_list();
	partial void LeaveRule_argument_expression_list();
	// $ANTLR start "argument_expression_list"
	// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:139:1: argument_expression_list returns [AstNodeCollection value] : e= expression ( ',' e= expression )* ;
	[GrammarRule("argument_expression_list")]
	private VisualBasicParser.argument_expression_list_return argument_expression_list()
	{
		EnterRule_argument_expression_list();
		EnterRule("argument_expression_list", 16);
		TraceIn("argument_expression_list", 16);
		VisualBasicParser.argument_expression_list_return retval = new VisualBasicParser.argument_expression_list_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal42 = default(CommonToken);
		VisualBasicParser.expression_return e = default(VisualBasicParser.expression_return);

		CommonTree char_literal42_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "argument_expression_list");
		DebugLocation(139, 1);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:140:2: (e= expression ( ',' e= expression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:140:4: e= expression ( ',' e= expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(140, 5);
			PushFollow(Follow._expression_in_argument_expression_list859);
			e=expression();
			PopFollow();

			adaptor.AddChild(root_0, e.Tree);
			DebugLocation(140, 17);
			 retval.value = new AstNodeCollection((e!=null?e.value:default(IAstNode))); 
			DebugLocation(141, 3);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:141:3: ( ',' e= expression )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==39))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:141:5: ',' e= expression
					{
					DebugLocation(141, 5);
					char_literal42=(CommonToken)Match(input,39,Follow._39_in_argument_expression_list867); 
					char_literal42_tree = (CommonTree)adaptor.Create(char_literal42);
					adaptor.AddChild(root_0, char_literal42_tree);
					DebugLocation(141, 10);
					PushFollow(Follow._expression_in_argument_expression_list871);
					e=expression();
					PopFollow();

					adaptor.AddChild(root_0, e.Tree);
					DebugLocation(141, 22);
					 retval.value = new AstNodeCollection(retval.value, (e!=null?e.value:default(IAstNode))); 

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("argument_expression_list", 16);
			LeaveRule("argument_expression_list", 16);
			LeaveRule_argument_expression_list();
		}
		DebugLocation(143, 1);
		} finally { DebugExitRule(GrammarFileName, "argument_expression_list"); }
		return retval;

	}
	// $ANTLR end "argument_expression_list"

	private sealed partial class postfix_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public postfix_expression_return(VisualBasicParser grammar) {OnCreated(grammar);}
		partial void OnCreated(VisualBasicParser grammar);
	}

	partial void EnterRule_postfix_expression();
	partial void LeaveRule_postfix_expression();
	// $ANTLR start "postfix_expression"
	// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:145:1: postfix_expression returns [IAstNode value] : p= primary_expression ( '(' ')' | '(' e= argument_expression_list ')' | DOT IDENTIFIER )* ;
	[GrammarRule("postfix_expression")]
	private VisualBasicParser.postfix_expression_return postfix_expression()
	{
		EnterRule_postfix_expression();
		EnterRule("postfix_expression", 17);
		TraceIn("postfix_expression", 17);
		VisualBasicParser.postfix_expression_return retval = new VisualBasicParser.postfix_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal43 = default(CommonToken);
		CommonToken char_literal44 = default(CommonToken);
		CommonToken char_literal45 = default(CommonToken);
		CommonToken char_literal46 = default(CommonToken);
		CommonToken DOT47 = default(CommonToken);
		CommonToken IDENTIFIER48 = default(CommonToken);
		VisualBasicParser.primary_expression_return p = default(VisualBasicParser.primary_expression_return);
		VisualBasicParser.argument_expression_list_return e = default(VisualBasicParser.argument_expression_list_return);

		CommonTree char_literal43_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree char_literal45_tree = default(CommonTree);
		CommonTree char_literal46_tree = default(CommonTree);
		CommonTree DOT47_tree = default(CommonTree);
		CommonTree IDENTIFIER48_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "postfix_expression");
		DebugLocation(145, 1);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:146:2: (p= primary_expression ( '(' ')' | '(' e= argument_expression_list ')' | DOT IDENTIFIER )* )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:146:4: p= primary_expression ( '(' ')' | '(' e= argument_expression_list ')' | DOT IDENTIFIER )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(146, 5);
			PushFollow(Follow._primary_expression_in_postfix_expression895);
			p=primary_expression();
			PopFollow();

			adaptor.AddChild(root_0, p.Tree);
			DebugLocation(146, 25);
			 retval.value = (p!=null?p.value:default(IAstNode)); 
			DebugLocation(147, 3);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:147:3: ( '(' ')' | '(' e= argument_expression_list ')' | DOT IDENTIFIER )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=4;
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==35))
				{
					int LA20_2 = input.LA(2);

					if ((LA20_2==36))
					{
						alt20 = 1;
					}
					else if (((LA20_2>=CHARACTER_LITERAL && LA20_2<=DIRECTCAST)||(LA20_2>=FALSE && LA20_2<=FLOATING_POINT_LITERAL)||LA20_2==HEX_LITERAL||(LA20_2>=IDENTIFIER && LA20_2<=IIF)||(LA20_2>=NOT && LA20_2<=NOTHING)||(LA20_2>=STRING_LITERAL && LA20_2<=TRUE)||LA20_2==35||LA20_2==38||LA20_2==40))
					{
						alt20 = 2;
					}


				}
				else if ((LA20_1==DOT))
				{
					alt20 = 3;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:147:5: '(' ')'
					{
					DebugLocation(147, 5);
					char_literal43=(CommonToken)Match(input,35,Follow._35_in_postfix_expression903); 
					char_literal43_tree = (CommonTree)adaptor.Create(char_literal43);
					adaptor.AddChild(root_0, char_literal43_tree);
					DebugLocation(147, 9);
					char_literal44=(CommonToken)Match(input,36,Follow._36_in_postfix_expression905); 
					char_literal44_tree = (CommonTree)adaptor.Create(char_literal44);
					adaptor.AddChild(root_0, char_literal44_tree);
					DebugLocation(147, 13);
					 retval.value = new MethodCall(retval.value); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:148:5: '(' e= argument_expression_list ')'
					{
					DebugLocation(148, 5);
					char_literal45=(CommonToken)Match(input,35,Follow._35_in_postfix_expression913); 
					char_literal45_tree = (CommonTree)adaptor.Create(char_literal45);
					adaptor.AddChild(root_0, char_literal45_tree);
					DebugLocation(148, 10);
					PushFollow(Follow._argument_expression_list_in_postfix_expression917);
					e=argument_expression_list();
					PopFollow();

					adaptor.AddChild(root_0, e.Tree);
					DebugLocation(148, 36);
					char_literal46=(CommonToken)Match(input,36,Follow._36_in_postfix_expression919); 
					char_literal46_tree = (CommonTree)adaptor.Create(char_literal46);
					adaptor.AddChild(root_0, char_literal46_tree);
					DebugLocation(148, 40);
					 retval.value = new MethodCall(retval.value, (e!=null?e.value:default(AstNodeCollection))); 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:149:5: DOT IDENTIFIER
					{
					DebugLocation(149, 5);
					DOT47=(CommonToken)Match(input,DOT,Follow._DOT_in_postfix_expression927); 
					DOT47_tree = (CommonTree)adaptor.Create(DOT47);
					adaptor.AddChild(root_0, DOT47_tree);
					DebugLocation(149, 9);
					IDENTIFIER48=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_postfix_expression929); 
					IDENTIFIER48_tree = (CommonTree)adaptor.Create(IDENTIFIER48);
					adaptor.AddChild(root_0, IDENTIFIER48_tree);
					DebugLocation(149, 20);
					 retval.value = new MemberAccess(retval.value, (IDENTIFIER48!=null?IDENTIFIER48.Text:null)); 

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("postfix_expression", 17);
			LeaveRule("postfix_expression", 17);
			LeaveRule_postfix_expression();
		}
		DebugLocation(151, 1);
		} finally { DebugExitRule(GrammarFileName, "postfix_expression"); }
		return retval;

	}
	// $ANTLR end "postfix_expression"

	private sealed partial class primary_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public primary_expression_return(VisualBasicParser grammar) {OnCreated(grammar);}
		partial void OnCreated(VisualBasicParser grammar);
	}

	partial void EnterRule_primary_expression();
	partial void LeaveRule_primary_expression();
	// $ANTLR start "primary_expression"
	// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:153:1: primary_expression returns [IAstNode value] : ( IDENTIFIER | constant | '(' expression ')' );
	[GrammarRule("primary_expression")]
	private VisualBasicParser.primary_expression_return primary_expression()
	{
		EnterRule_primary_expression();
		EnterRule("primary_expression", 18);
		TraceIn("primary_expression", 18);
		VisualBasicParser.primary_expression_return retval = new VisualBasicParser.primary_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENTIFIER49 = default(CommonToken);
		CommonToken char_literal51 = default(CommonToken);
		CommonToken char_literal53 = default(CommonToken);
		VisualBasicParser.constant_return constant50 = default(VisualBasicParser.constant_return);
		VisualBasicParser.expression_return expression52 = default(VisualBasicParser.expression_return);

		CommonTree IDENTIFIER49_tree = default(CommonTree);
		CommonTree char_literal51_tree = default(CommonTree);
		CommonTree char_literal53_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "primary_expression");
		DebugLocation(153, 1);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:154:2: ( IDENTIFIER | constant | '(' expression ')' )
			int alt21=3;
			try { DebugEnterDecision(21, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				alt21 = 1;
				}
				break;
			case CHARACTER_LITERAL:
			case DATETIME_LITERAL:
			case DECIMAL_LITERAL:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case NOTHING:
			case STRING_LITERAL:
			case TIMESPAN_LITERAL:
			case TRUE:
				{
				alt21 = 2;
				}
				break;
			case 35:
				{
				alt21 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:154:4: IDENTIFIER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(154, 4);
				IDENTIFIER49=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary_expression951); 
				IDENTIFIER49_tree = (CommonTree)adaptor.Create(IDENTIFIER49);
				adaptor.AddChild(root_0, IDENTIFIER49_tree);
				DebugLocation(154, 15);
				 retval.value = CreateIdentifier((IDENTIFIER49!=null?IDENTIFIER49.Text:null)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:155:4: constant
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(155, 4);
				PushFollow(Follow._constant_in_primary_expression958);
				constant50=constant();
				PopFollow();

				adaptor.AddChild(root_0, constant50.Tree);
				DebugLocation(155, 13);
				 retval.value = (constant50!=null?constant50.value:default(Constant)); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:156:4: '(' expression ')'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(156, 4);
				char_literal51=(CommonToken)Match(input,35,Follow._35_in_primary_expression965); 
				char_literal51_tree = (CommonTree)adaptor.Create(char_literal51);
				adaptor.AddChild(root_0, char_literal51_tree);
				DebugLocation(156, 8);
				PushFollow(Follow._expression_in_primary_expression967);
				expression52=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression52.Tree);
				DebugLocation(156, 19);
				char_literal53=(CommonToken)Match(input,36,Follow._36_in_primary_expression969); 
				char_literal53_tree = (CommonTree)adaptor.Create(char_literal53);
				adaptor.AddChild(root_0, char_literal53_tree);
				DebugLocation(156, 23);
				 retval.value = new UnaryExpression((expression52!=null?expression52.value:default(IAstNode)), ExpressionType.Group); 

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("primary_expression", 18);
			LeaveRule("primary_expression", 18);
			LeaveRule_primary_expression();
		}
		DebugLocation(157, 1);
		} finally { DebugExitRule(GrammarFileName, "primary_expression"); }
		return retval;

	}
	// $ANTLR end "primary_expression"

	private sealed partial class constant_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public Constant value;
		public constant_return(VisualBasicParser grammar) {OnCreated(grammar);}
		partial void OnCreated(VisualBasicParser grammar);
	}

	partial void EnterRule_constant();
	partial void LeaveRule_constant();
	// $ANTLR start "constant"
	// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:159:1: constant returns [Constant value] : ( TRUE | FALSE | NOTHING | DATETIME_LITERAL | TIMESPAN_LITERAL | HEX_LITERAL | DECIMAL_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | FLOATING_POINT_LITERAL );
	[GrammarRule("constant")]
	private VisualBasicParser.constant_return constant()
	{
		EnterRule_constant();
		EnterRule("constant", 19);
		TraceIn("constant", 19);
		VisualBasicParser.constant_return retval = new VisualBasicParser.constant_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TRUE54 = default(CommonToken);
		CommonToken FALSE55 = default(CommonToken);
		CommonToken NOTHING56 = default(CommonToken);
		CommonToken DATETIME_LITERAL57 = default(CommonToken);
		CommonToken TIMESPAN_LITERAL58 = default(CommonToken);
		CommonToken HEX_LITERAL59 = default(CommonToken);
		CommonToken DECIMAL_LITERAL60 = default(CommonToken);
		CommonToken CHARACTER_LITERAL61 = default(CommonToken);
		CommonToken STRING_LITERAL62 = default(CommonToken);
		CommonToken FLOATING_POINT_LITERAL63 = default(CommonToken);

		CommonTree TRUE54_tree = default(CommonTree);
		CommonTree FALSE55_tree = default(CommonTree);
		CommonTree NOTHING56_tree = default(CommonTree);
		CommonTree DATETIME_LITERAL57_tree = default(CommonTree);
		CommonTree TIMESPAN_LITERAL58_tree = default(CommonTree);
		CommonTree HEX_LITERAL59_tree = default(CommonTree);
		CommonTree DECIMAL_LITERAL60_tree = default(CommonTree);
		CommonTree CHARACTER_LITERAL61_tree = default(CommonTree);
		CommonTree STRING_LITERAL62_tree = default(CommonTree);
		CommonTree FLOATING_POINT_LITERAL63_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(159, 1);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:160:2: ( TRUE | FALSE | NOTHING | DATETIME_LITERAL | TIMESPAN_LITERAL | HEX_LITERAL | DECIMAL_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | FLOATING_POINT_LITERAL )
			int alt22=10;
			try { DebugEnterDecision(22, false);
			switch (input.LA(1))
			{
			case TRUE:
				{
				alt22 = 1;
				}
				break;
			case FALSE:
				{
				alt22 = 2;
				}
				break;
			case NOTHING:
				{
				alt22 = 3;
				}
				break;
			case DATETIME_LITERAL:
				{
				alt22 = 4;
				}
				break;
			case TIMESPAN_LITERAL:
				{
				alt22 = 5;
				}
				break;
			case HEX_LITERAL:
				{
				alt22 = 6;
				}
				break;
			case DECIMAL_LITERAL:
				{
				alt22 = 7;
				}
				break;
			case CHARACTER_LITERAL:
				{
				alt22 = 8;
				}
				break;
			case STRING_LITERAL:
				{
				alt22 = 9;
				}
				break;
			case FLOATING_POINT_LITERAL:
				{
				alt22 = 10;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:160:4: TRUE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(160, 4);
				TRUE54=(CommonToken)Match(input,TRUE,Follow._TRUE_in_constant986); 
				TRUE54_tree = (CommonTree)adaptor.Create(TRUE54);
				adaptor.AddChild(root_0, TRUE54_tree);
				DebugLocation(160, 9);
				 retval.value = Constant.True; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:161:4: FALSE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(161, 4);
				FALSE55=(CommonToken)Match(input,FALSE,Follow._FALSE_in_constant993); 
				FALSE55_tree = (CommonTree)adaptor.Create(FALSE55);
				adaptor.AddChild(root_0, FALSE55_tree);
				DebugLocation(161, 10);
				 retval.value = Constant.False; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:162:4: NOTHING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(162, 4);
				NOTHING56=(CommonToken)Match(input,NOTHING,Follow._NOTHING_in_constant1000); 
				NOTHING56_tree = (CommonTree)adaptor.Create(NOTHING56);
				adaptor.AddChild(root_0, NOTHING56_tree);
				DebugLocation(162, 12);
				 retval.value = Constant.Null; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:163:4: DATETIME_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(163, 4);
				DATETIME_LITERAL57=(CommonToken)Match(input,DATETIME_LITERAL,Follow._DATETIME_LITERAL_in_constant1007); 
				DATETIME_LITERAL57_tree = (CommonTree)adaptor.Create(DATETIME_LITERAL57);
				adaptor.AddChild(root_0, DATETIME_LITERAL57_tree);
				DebugLocation(163, 21);
				 retval.value = ParseDateTime((DATETIME_LITERAL57!=null?DATETIME_LITERAL57.Text:null)); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:164:4: TIMESPAN_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(164, 4);
				TIMESPAN_LITERAL58=(CommonToken)Match(input,TIMESPAN_LITERAL,Follow._TIMESPAN_LITERAL_in_constant1014); 
				TIMESPAN_LITERAL58_tree = (CommonTree)adaptor.Create(TIMESPAN_LITERAL58);
				adaptor.AddChild(root_0, TIMESPAN_LITERAL58_tree);
				DebugLocation(164, 21);
				 retval.value = ParseTimeSpan((TIMESPAN_LITERAL58!=null?TIMESPAN_LITERAL58.Text:null)); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:165:4: HEX_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(165, 4);
				HEX_LITERAL59=(CommonToken)Match(input,HEX_LITERAL,Follow._HEX_LITERAL_in_constant1021); 
				HEX_LITERAL59_tree = (CommonTree)adaptor.Create(HEX_LITERAL59);
				adaptor.AddChild(root_0, HEX_LITERAL59_tree);
				DebugLocation(165, 16);
				 retval.value = ParseHex((HEX_LITERAL59!=null?HEX_LITERAL59.Text:null)); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:166:4: DECIMAL_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(166, 4);
				DECIMAL_LITERAL60=(CommonToken)Match(input,DECIMAL_LITERAL,Follow._DECIMAL_LITERAL_in_constant1028); 
				DECIMAL_LITERAL60_tree = (CommonTree)adaptor.Create(DECIMAL_LITERAL60);
				adaptor.AddChild(root_0, DECIMAL_LITERAL60_tree);
				DebugLocation(166, 20);
				 retval.value = ParseDecimal((DECIMAL_LITERAL60!=null?DECIMAL_LITERAL60.Text:null)); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:167:4: CHARACTER_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(167, 4);
				CHARACTER_LITERAL61=(CommonToken)Match(input,CHARACTER_LITERAL,Follow._CHARACTER_LITERAL_in_constant1035); 
				CHARACTER_LITERAL61_tree = (CommonTree)adaptor.Create(CHARACTER_LITERAL61);
				adaptor.AddChild(root_0, CHARACTER_LITERAL61_tree);
				DebugLocation(167, 22);
				 retval.value = ParseCharacter((CHARACTER_LITERAL61!=null?CHARACTER_LITERAL61.Text:null)); 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:168:4: STRING_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(168, 4);
				STRING_LITERAL62=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_constant1042); 
				STRING_LITERAL62_tree = (CommonTree)adaptor.Create(STRING_LITERAL62);
				adaptor.AddChild(root_0, STRING_LITERAL62_tree);
				DebugLocation(168, 19);
				 retval.value = ParseString((STRING_LITERAL62!=null?STRING_LITERAL62.Text:null)); 

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\VisualBasic\\VisualBasic.g:169:4: FLOATING_POINT_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(169, 4);
				FLOATING_POINT_LITERAL63=(CommonToken)Match(input,FLOATING_POINT_LITERAL,Follow._FLOATING_POINT_LITERAL_in_constant1049); 
				FLOATING_POINT_LITERAL63_tree = (CommonTree)adaptor.Create(FLOATING_POINT_LITERAL63);
				adaptor.AddChild(root_0, FLOATING_POINT_LITERAL63_tree);
				DebugLocation(169, 27);
				 retval.value = ParseFloatingPoint((FLOATING_POINT_LITERAL63!=null?FLOATING_POINT_LITERAL63.Text:null)); 

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("constant", 19);
			LeaveRule("constant", 19);
			LeaveRule_constant();
		}
		DebugLocation(170, 1);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _expression_in_prog97 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_prog101 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_xor_expression_in_expression118 = new BitSet(new ulong[]{0xC000002UL});
		public static readonly BitSet _OR_in_expression126 = new BitSet(new ulong[]{0x148719AC7C0UL});
		public static readonly BitSet _logical_xor_expression_in_expression130 = new BitSet(new ulong[]{0xC000002UL});
		public static readonly BitSet _ORELSE_in_expression142 = new BitSet(new ulong[]{0x148719AC7C0UL});
		public static readonly BitSet _logical_xor_expression_in_expression146 = new BitSet(new ulong[]{0xC000002UL});
		public static readonly BitSet _logical_and_expression_in_logical_xor_expression174 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _XOR_in_logical_xor_expression182 = new BitSet(new ulong[]{0x148719AC7C0UL});
		public static readonly BitSet _logical_and_expression_in_logical_xor_expression186 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _unary_not_expression_in_logical_and_expression214 = new BitSet(new ulong[]{0x32UL});
		public static readonly BitSet _AND_in_logical_and_expression222 = new BitSet(new ulong[]{0x148719AC7C0UL});
		public static readonly BitSet _unary_not_expression_in_logical_and_expression226 = new BitSet(new ulong[]{0x32UL});
		public static readonly BitSet _ANDALSO_in_logical_and_expression238 = new BitSet(new ulong[]{0x148719AC7C0UL});
		public static readonly BitSet _unary_not_expression_in_logical_and_expression242 = new BitSet(new ulong[]{0x32UL});
		public static readonly BitSet _equality_expression_in_unary_not_expression270 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_unary_not_expression277 = new BitSet(new ulong[]{0x148719AC7C0UL});
		public static readonly BitSet _unary_not_expression_in_unary_not_expression281 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _relational_expression_in_equality_expression300 = new BitSet(new ulong[]{0x300000200002UL});
		public static readonly BitSet _45_in_equality_expression313 = new BitSet(new ulong[]{0x148711AC7C0UL});
		public static readonly BitSet _relational_expression_in_equality_expression317 = new BitSet(new ulong[]{0x300000200002UL});
		public static readonly BitSet _44_in_equality_expression326 = new BitSet(new ulong[]{0x148711AC7C0UL});
		public static readonly BitSet _relational_expression_in_equality_expression330 = new BitSet(new ulong[]{0x300000200002UL});
		public static readonly BitSet _IS_in_equality_expression339 = new BitSet(new ulong[]{0x148711AC7C0UL});
		public static readonly BitSet _relational_expression_in_equality_expression343 = new BitSet(new ulong[]{0x300000200002UL});
		public static readonly BitSet _additive_expression_in_relational_expression372 = new BitSet(new ulong[]{0xCC0000000002UL});
		public static readonly BitSet _42_in_relational_expression385 = new BitSet(new ulong[]{0x148711AC7C0UL});
		public static readonly BitSet _additive_expression_in_relational_expression389 = new BitSet(new ulong[]{0xCC0000000002UL});
		public static readonly BitSet _46_in_relational_expression398 = new BitSet(new ulong[]{0x148711AC7C0UL});
		public static readonly BitSet _additive_expression_in_relational_expression402 = new BitSet(new ulong[]{0xCC0000000002UL});
		public static readonly BitSet _43_in_relational_expression411 = new BitSet(new ulong[]{0x148711AC7C0UL});
		public static readonly BitSet _additive_expression_in_relational_expression415 = new BitSet(new ulong[]{0xCC0000000002UL});
		public static readonly BitSet _47_in_relational_expression424 = new BitSet(new ulong[]{0x148711AC7C0UL});
		public static readonly BitSet _additive_expression_in_relational_expression428 = new BitSet(new ulong[]{0xCC0000000002UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression457 = new BitSet(new ulong[]{0x14400000002UL});
		public static readonly BitSet _38_in_additive_expression465 = new BitSet(new ulong[]{0x148711AC7C0UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression469 = new BitSet(new ulong[]{0x14400000002UL});
		public static readonly BitSet _40_in_additive_expression477 = new BitSet(new ulong[]{0x148711AC7C0UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression481 = new BitSet(new ulong[]{0x14400000002UL});
		public static readonly BitSet _34_in_additive_expression489 = new BitSet(new ulong[]{0x148711AC7C0UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression493 = new BitSet(new ulong[]{0x14400000002UL});
		public static readonly BitSet _power_expression_in_multiplicative_expression517 = new BitSet(new ulong[]{0x22200000002UL});
		public static readonly BitSet _37_in_multiplicative_expression525 = new BitSet(new ulong[]{0x148711AC7C0UL});
		public static readonly BitSet _power_expression_in_multiplicative_expression529 = new BitSet(new ulong[]{0x22200000002UL});
		public static readonly BitSet _41_in_multiplicative_expression537 = new BitSet(new ulong[]{0x148711AC7C0UL});
		public static readonly BitSet _power_expression_in_multiplicative_expression541 = new BitSet(new ulong[]{0x22200000002UL});
		public static readonly BitSet _33_in_multiplicative_expression549 = new BitSet(new ulong[]{0x148711AC7C0UL});
		public static readonly BitSet _power_expression_in_multiplicative_expression553 = new BitSet(new ulong[]{0x22200000002UL});
		public static readonly BitSet _cast_expression_in_power_expression577 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _48_in_power_expression585 = new BitSet(new ulong[]{0x148711AC7C0UL});
		public static readonly BitSet _cast_expression_in_power_expression589 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _CTYPE_in_cast_expression611 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _35_in_cast_expression613 = new BitSet(new ulong[]{0x148719AC7C0UL});
		public static readonly BitSet _expression_in_cast_expression617 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_cast_expression619 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _type_expression_in_cast_expression623 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _36_in_cast_expression625 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DIRECTCAST_in_cast_expression632 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _35_in_cast_expression634 = new BitSet(new ulong[]{0x148719AC7C0UL});
		public static readonly BitSet _expression_in_cast_expression638 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_cast_expression640 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _type_expression_in_cast_expression644 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _36_in_cast_expression646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _if_expression_in_cast_expression655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_identifier_in_type_expression674 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _35_in_type_expression685 = new BitSet(new ulong[]{0x9000000000UL});
		public static readonly BitSet _39_in_type_expression695 = new BitSet(new ulong[]{0x9000000000UL});
		public static readonly BitSet _36_in_type_expression709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_type_identifier731 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _DOT_in_type_identifier737 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _IDENTIFIER_in_type_identifier741 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _IIF_in_if_expression761 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _35_in_if_expression763 = new BitSet(new ulong[]{0x148719AC7C0UL});
		public static readonly BitSet _expression_in_if_expression767 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_if_expression769 = new BitSet(new ulong[]{0x148719AC7C0UL});
		public static readonly BitSet _expression_in_if_expression773 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_if_expression775 = new BitSet(new ulong[]{0x148719AC7C0UL});
		public static readonly BitSet _expression_in_if_expression779 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _36_in_if_expression781 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_if_expression790 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _postfix_expression_in_unary_expression809 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _38_in_unary_expression820 = new BitSet(new ulong[]{0x148711AC7C0UL});
		public static readonly BitSet _cast_expression_in_unary_expression824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _40_in_unary_expression832 = new BitSet(new ulong[]{0x148711AC7C0UL});
		public static readonly BitSet _cast_expression_in_unary_expression836 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_argument_expression_list859 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _39_in_argument_expression_list867 = new BitSet(new ulong[]{0x148719AC7C0UL});
		public static readonly BitSet _expression_in_argument_expression_list871 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _primary_expression_in_postfix_expression895 = new BitSet(new ulong[]{0x800000802UL});
		public static readonly BitSet _35_in_postfix_expression903 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _36_in_postfix_expression905 = new BitSet(new ulong[]{0x800000802UL});
		public static readonly BitSet _35_in_postfix_expression913 = new BitSet(new ulong[]{0x148719AC7C0UL});
		public static readonly BitSet _argument_expression_list_in_postfix_expression917 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _36_in_postfix_expression919 = new BitSet(new ulong[]{0x800000802UL});
		public static readonly BitSet _DOT_in_postfix_expression927 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _IDENTIFIER_in_postfix_expression929 = new BitSet(new ulong[]{0x800000802UL});
		public static readonly BitSet _IDENTIFIER_in_primary_expression951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_primary_expression958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _35_in_primary_expression965 = new BitSet(new ulong[]{0x148719AC7C0UL});
		public static readonly BitSet _expression_in_primary_expression967 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _36_in_primary_expression969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_in_constant986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_in_constant993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOTHING_in_constant1000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATETIME_LITERAL_in_constant1007 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TIMESPAN_LITERAL_in_constant1014 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HEX_LITERAL_in_constant1021 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECIMAL_LITERAL_in_constant1028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHARACTER_LITERAL_in_constant1035 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_constant1042 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOATING_POINT_LITERAL_in_constant1049 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  Expressions.VisualBasic 

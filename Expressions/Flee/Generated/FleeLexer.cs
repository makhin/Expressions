//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g 2017-01-05 07:21:09

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  Expressions.Flee 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
 internal  partial class FleeLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int AND=4;
	public const int CAST=5;
	public const int CHARACTER_LITERAL=6;
	public const int DATETIME_LITERAL=7;
	public const int DECIMAL_LITERAL=8;
	public const int DOT=9;
	public const int Digits=10;
	public const int EscapeSequence=11;
	public const int Exponent=12;
	public const int FALSE=13;
	public const int FLOATING_POINT_LITERAL=14;
	public const int FloatTypeSuffix=15;
	public const int HEX_LITERAL=16;
	public const int HexDigit=17;
	public const int IDENTIFIER=18;
	public const int IF=19;
	public const int IN=20;
	public const int LETTER=21;
	public const int NOT=22;
	public const int NULL=23;
	public const int NumericTypeSuffix=24;
	public const int OR=25;
	public const int STRING_LITERAL=26;
	public const int TIMESPAN_LITERAL=27;
	public const int TRUE=28;
	public const int UnicodeEscape=29;
	public const int WS=30;
	public const int XOR=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;

    // delegates
    // delegators

	public FleeLexer()
	{
		OnCreated();
	}

	public FleeLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public FleeLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__32();
	partial void LeaveRule_T__32();

	// $ANTLR start "T__32"
	[GrammarRule("T__32")]
	private void mT__32()
	{
		EnterRule_T__32();
		EnterRule("T__32", 1);
		TraceIn("T__32", 1);
		try
		{
			int _type = T__32;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:11:7: ( '%' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:11:9: '%'
			{
			DebugLocation(11, 9);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__32", 1);
			LeaveRule("T__32", 1);
			LeaveRule_T__32();
		}
	}
	// $ANTLR end "T__32"

	partial void EnterRule_T__33();
	partial void LeaveRule_T__33();

	// $ANTLR start "T__33"
	[GrammarRule("T__33")]
	private void mT__33()
	{
		EnterRule_T__33();
		EnterRule("T__33", 2);
		TraceIn("T__33", 2);
		try
		{
			int _type = T__33;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:12:7: ( '(' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:12:9: '('
			{
			DebugLocation(12, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__33", 2);
			LeaveRule("T__33", 2);
			LeaveRule_T__33();
		}
	}
	// $ANTLR end "T__33"

	partial void EnterRule_T__34();
	partial void LeaveRule_T__34();

	// $ANTLR start "T__34"
	[GrammarRule("T__34")]
	private void mT__34()
	{
		EnterRule_T__34();
		EnterRule("T__34", 3);
		TraceIn("T__34", 3);
		try
		{
			int _type = T__34;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:13:7: ( ')' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:13:9: ')'
			{
			DebugLocation(13, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__34", 3);
			LeaveRule("T__34", 3);
			LeaveRule_T__34();
		}
	}
	// $ANTLR end "T__34"

	partial void EnterRule_T__35();
	partial void LeaveRule_T__35();

	// $ANTLR start "T__35"
	[GrammarRule("T__35")]
	private void mT__35()
	{
		EnterRule_T__35();
		EnterRule("T__35", 4);
		TraceIn("T__35", 4);
		try
		{
			int _type = T__35;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:14:7: ( '*' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:14:9: '*'
			{
			DebugLocation(14, 9);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__35", 4);
			LeaveRule("T__35", 4);
			LeaveRule_T__35();
		}
	}
	// $ANTLR end "T__35"

	partial void EnterRule_T__36();
	partial void LeaveRule_T__36();

	// $ANTLR start "T__36"
	[GrammarRule("T__36")]
	private void mT__36()
	{
		EnterRule_T__36();
		EnterRule("T__36", 5);
		TraceIn("T__36", 5);
		try
		{
			int _type = T__36;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:15:7: ( '+' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:15:9: '+'
			{
			DebugLocation(15, 9);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__36", 5);
			LeaveRule("T__36", 5);
			LeaveRule_T__36();
		}
	}
	// $ANTLR end "T__36"

	partial void EnterRule_T__37();
	partial void LeaveRule_T__37();

	// $ANTLR start "T__37"
	[GrammarRule("T__37")]
	private void mT__37()
	{
		EnterRule_T__37();
		EnterRule("T__37", 6);
		TraceIn("T__37", 6);
		try
		{
			int _type = T__37;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:16:7: ( ',' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:16:9: ','
			{
			DebugLocation(16, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__37", 6);
			LeaveRule("T__37", 6);
			LeaveRule_T__37();
		}
	}
	// $ANTLR end "T__37"

	partial void EnterRule_T__38();
	partial void LeaveRule_T__38();

	// $ANTLR start "T__38"
	[GrammarRule("T__38")]
	private void mT__38()
	{
		EnterRule_T__38();
		EnterRule("T__38", 7);
		TraceIn("T__38", 7);
		try
		{
			int _type = T__38;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:17:7: ( '-' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:17:9: '-'
			{
			DebugLocation(17, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__38", 7);
			LeaveRule("T__38", 7);
			LeaveRule_T__38();
		}
	}
	// $ANTLR end "T__38"

	partial void EnterRule_T__39();
	partial void LeaveRule_T__39();

	// $ANTLR start "T__39"
	[GrammarRule("T__39")]
	private void mT__39()
	{
		EnterRule_T__39();
		EnterRule("T__39", 8);
		TraceIn("T__39", 8);
		try
		{
			int _type = T__39;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:18:7: ( '/' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:18:9: '/'
			{
			DebugLocation(18, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__39", 8);
			LeaveRule("T__39", 8);
			LeaveRule_T__39();
		}
	}
	// $ANTLR end "T__39"

	partial void EnterRule_T__40();
	partial void LeaveRule_T__40();

	// $ANTLR start "T__40"
	[GrammarRule("T__40")]
	private void mT__40()
	{
		EnterRule_T__40();
		EnterRule("T__40", 9);
		TraceIn("T__40", 9);
		try
		{
			int _type = T__40;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:19:7: ( '<' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:19:9: '<'
			{
			DebugLocation(19, 9);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__40", 9);
			LeaveRule("T__40", 9);
			LeaveRule_T__40();
		}
	}
	// $ANTLR end "T__40"

	partial void EnterRule_T__41();
	partial void LeaveRule_T__41();

	// $ANTLR start "T__41"
	[GrammarRule("T__41")]
	private void mT__41()
	{
		EnterRule_T__41();
		EnterRule("T__41", 10);
		TraceIn("T__41", 10);
		try
		{
			int _type = T__41;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:20:7: ( '<<' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:20:9: '<<'
			{
			DebugLocation(20, 9);
			Match("<<"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__41", 10);
			LeaveRule("T__41", 10);
			LeaveRule_T__41();
		}
	}
	// $ANTLR end "T__41"

	partial void EnterRule_T__42();
	partial void LeaveRule_T__42();

	// $ANTLR start "T__42"
	[GrammarRule("T__42")]
	private void mT__42()
	{
		EnterRule_T__42();
		EnterRule("T__42", 11);
		TraceIn("T__42", 11);
		try
		{
			int _type = T__42;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:21:7: ( '<=' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:21:9: '<='
			{
			DebugLocation(21, 9);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__42", 11);
			LeaveRule("T__42", 11);
			LeaveRule_T__42();
		}
	}
	// $ANTLR end "T__42"

	partial void EnterRule_T__43();
	partial void LeaveRule_T__43();

	// $ANTLR start "T__43"
	[GrammarRule("T__43")]
	private void mT__43()
	{
		EnterRule_T__43();
		EnterRule("T__43", 12);
		TraceIn("T__43", 12);
		try
		{
			int _type = T__43;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:22:7: ( '<>' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:22:9: '<>'
			{
			DebugLocation(22, 9);
			Match("<>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__43", 12);
			LeaveRule("T__43", 12);
			LeaveRule_T__43();
		}
	}
	// $ANTLR end "T__43"

	partial void EnterRule_T__44();
	partial void LeaveRule_T__44();

	// $ANTLR start "T__44"
	[GrammarRule("T__44")]
	private void mT__44()
	{
		EnterRule_T__44();
		EnterRule("T__44", 13);
		TraceIn("T__44", 13);
		try
		{
			int _type = T__44;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:23:7: ( '=' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:23:9: '='
			{
			DebugLocation(23, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__44", 13);
			LeaveRule("T__44", 13);
			LeaveRule_T__44();
		}
	}
	// $ANTLR end "T__44"

	partial void EnterRule_T__45();
	partial void LeaveRule_T__45();

	// $ANTLR start "T__45"
	[GrammarRule("T__45")]
	private void mT__45()
	{
		EnterRule_T__45();
		EnterRule("T__45", 14);
		TraceIn("T__45", 14);
		try
		{
			int _type = T__45;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:24:7: ( '>' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:24:9: '>'
			{
			DebugLocation(24, 9);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__45", 14);
			LeaveRule("T__45", 14);
			LeaveRule_T__45();
		}
	}
	// $ANTLR end "T__45"

	partial void EnterRule_T__46();
	partial void LeaveRule_T__46();

	// $ANTLR start "T__46"
	[GrammarRule("T__46")]
	private void mT__46()
	{
		EnterRule_T__46();
		EnterRule("T__46", 15);
		TraceIn("T__46", 15);
		try
		{
			int _type = T__46;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:25:7: ( '>=' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:25:9: '>='
			{
			DebugLocation(25, 9);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__46", 15);
			LeaveRule("T__46", 15);
			LeaveRule_T__46();
		}
	}
	// $ANTLR end "T__46"

	partial void EnterRule_T__47();
	partial void LeaveRule_T__47();

	// $ANTLR start "T__47"
	[GrammarRule("T__47")]
	private void mT__47()
	{
		EnterRule_T__47();
		EnterRule("T__47", 16);
		TraceIn("T__47", 16);
		try
		{
			int _type = T__47;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:26:7: ( '>>' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:26:9: '>>'
			{
			DebugLocation(26, 9);
			Match(">>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__47", 16);
			LeaveRule("T__47", 16);
			LeaveRule_T__47();
		}
	}
	// $ANTLR end "T__47"

	partial void EnterRule_T__48();
	partial void LeaveRule_T__48();

	// $ANTLR start "T__48"
	[GrammarRule("T__48")]
	private void mT__48()
	{
		EnterRule_T__48();
		EnterRule("T__48", 17);
		TraceIn("T__48", 17);
		try
		{
			int _type = T__48;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:27:7: ( '[' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:27:9: '['
			{
			DebugLocation(27, 9);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__48", 17);
			LeaveRule("T__48", 17);
			LeaveRule_T__48();
		}
	}
	// $ANTLR end "T__48"

	partial void EnterRule_T__49();
	partial void LeaveRule_T__49();

	// $ANTLR start "T__49"
	[GrammarRule("T__49")]
	private void mT__49()
	{
		EnterRule_T__49();
		EnterRule("T__49", 18);
		TraceIn("T__49", 18);
		try
		{
			int _type = T__49;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:28:7: ( ']' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:28:9: ']'
			{
			DebugLocation(28, 9);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__49", 18);
			LeaveRule("T__49", 18);
			LeaveRule_T__49();
		}
	}
	// $ANTLR end "T__49"

	partial void EnterRule_T__50();
	partial void LeaveRule_T__50();

	// $ANTLR start "T__50"
	[GrammarRule("T__50")]
	private void mT__50()
	{
		EnterRule_T__50();
		EnterRule("T__50", 19);
		TraceIn("T__50", 19);
		try
		{
			int _type = T__50;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:29:7: ( '^' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:29:9: '^'
			{
			DebugLocation(29, 9);
			Match('^'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__50", 19);
			LeaveRule("T__50", 19);
			LeaveRule_T__50();
		}
	}
	// $ANTLR end "T__50"

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 20);
		TraceIn("AND", 20);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:186:2: ( ( 'A' | 'a' ) ( 'N' | 'n' ) ( 'D' | 'd' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:186:4: ( 'A' | 'a' ) ( 'N' | 'n' ) ( 'D' | 'd' )
			{
			DebugLocation(186, 4);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(186, 13);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(186, 22);
			if (input.LA(1)=='D'||input.LA(1)=='d')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 20);
			LeaveRule("AND", 20);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_IN();
	partial void LeaveRule_IN();

	// $ANTLR start "IN"
	[GrammarRule("IN")]
	private void mIN()
	{
		EnterRule_IN();
		EnterRule("IN", 21);
		TraceIn("IN", 21);
		try
		{
			int _type = IN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:190:2: ( ( 'I' | 'i' ) ( 'N' | 'n' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:190:4: ( 'I' | 'i' ) ( 'N' | 'n' )
			{
			DebugLocation(190, 4);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(190, 13);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IN", 21);
			LeaveRule("IN", 21);
			LeaveRule_IN();
		}
	}
	// $ANTLR end "IN"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 22);
		TraceIn("OR", 22);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:194:2: ( ( 'O' | 'o' ) ( 'R' | 'r' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:194:4: ( 'O' | 'o' ) ( 'R' | 'r' )
			{
			DebugLocation(194, 4);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(194, 13);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 22);
			LeaveRule("OR", 22);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_XOR();
	partial void LeaveRule_XOR();

	// $ANTLR start "XOR"
	[GrammarRule("XOR")]
	private void mXOR()
	{
		EnterRule_XOR();
		EnterRule("XOR", 23);
		TraceIn("XOR", 23);
		try
		{
			int _type = XOR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:198:2: ( ( 'X' | 'x' ) ( 'O' | 'o' ) ( 'R' | 'r' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:198:4: ( 'X' | 'x' ) ( 'O' | 'o' ) ( 'R' | 'r' )
			{
			DebugLocation(198, 4);
			if (input.LA(1)=='X'||input.LA(1)=='x')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(198, 13);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(198, 22);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("XOR", 23);
			LeaveRule("XOR", 23);
			LeaveRule_XOR();
		}
	}
	// $ANTLR end "XOR"

	partial void EnterRule_CAST();
	partial void LeaveRule_CAST();

	// $ANTLR start "CAST"
	[GrammarRule("CAST")]
	private void mCAST()
	{
		EnterRule_CAST();
		EnterRule("CAST", 24);
		TraceIn("CAST", 24);
		try
		{
			int _type = CAST;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:202:2: ( ( 'C' | 'c' ) ( 'A' | 'a' ) ( 'S' | 's' ) ( 'T' | 't' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:202:4: ( 'C' | 'c' ) ( 'A' | 'a' ) ( 'S' | 's' ) ( 'T' | 't' )
			{
			DebugLocation(202, 4);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(202, 13);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(202, 22);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(202, 31);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CAST", 24);
			LeaveRule("CAST", 24);
			LeaveRule_CAST();
		}
	}
	// $ANTLR end "CAST"

	partial void EnterRule_IF();
	partial void LeaveRule_IF();

	// $ANTLR start "IF"
	[GrammarRule("IF")]
	private void mIF()
	{
		EnterRule_IF();
		EnterRule("IF", 25);
		TraceIn("IF", 25);
		try
		{
			int _type = IF;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:206:2: ( ( 'I' | 'i' ) ( 'F' | 'f' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:206:4: ( 'I' | 'i' ) ( 'F' | 'f' )
			{
			DebugLocation(206, 4);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(206, 13);
			if (input.LA(1)=='F'||input.LA(1)=='f')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IF", 25);
			LeaveRule("IF", 25);
			LeaveRule_IF();
		}
	}
	// $ANTLR end "IF"

	partial void EnterRule_NOT();
	partial void LeaveRule_NOT();

	// $ANTLR start "NOT"
	[GrammarRule("NOT")]
	private void mNOT()
	{
		EnterRule_NOT();
		EnterRule("NOT", 26);
		TraceIn("NOT", 26);
		try
		{
			int _type = NOT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:210:2: ( ( 'N' | 'n' ) ( 'O' | 'o' ) ( 'T' | 't' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:210:4: ( 'N' | 'n' ) ( 'O' | 'o' ) ( 'T' | 't' )
			{
			DebugLocation(210, 4);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(210, 13);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(210, 22);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT", 26);
			LeaveRule("NOT", 26);
			LeaveRule_NOT();
		}
	}
	// $ANTLR end "NOT"

	partial void EnterRule_TRUE();
	partial void LeaveRule_TRUE();

	// $ANTLR start "TRUE"
	[GrammarRule("TRUE")]
	private void mTRUE()
	{
		EnterRule_TRUE();
		EnterRule("TRUE", 27);
		TraceIn("TRUE", 27);
		try
		{
			int _type = TRUE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:214:2: ( ( 'T' | 't' ) ( 'R' | 'r' ) ( 'U' | 'u' ) ( 'E' | 'e' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:214:4: ( 'T' | 't' ) ( 'R' | 'r' ) ( 'U' | 'u' ) ( 'E' | 'e' )
			{
			DebugLocation(214, 4);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(214, 13);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(214, 22);
			if (input.LA(1)=='U'||input.LA(1)=='u')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(214, 31);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TRUE", 27);
			LeaveRule("TRUE", 27);
			LeaveRule_TRUE();
		}
	}
	// $ANTLR end "TRUE"

	partial void EnterRule_FALSE();
	partial void LeaveRule_FALSE();

	// $ANTLR start "FALSE"
	[GrammarRule("FALSE")]
	private void mFALSE()
	{
		EnterRule_FALSE();
		EnterRule("FALSE", 28);
		TraceIn("FALSE", 28);
		try
		{
			int _type = FALSE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:218:2: ( ( 'F' | 'f' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ( 'S' | 's' ) ( 'E' | 'e' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:218:4: ( 'F' | 'f' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ( 'S' | 's' ) ( 'E' | 'e' )
			{
			DebugLocation(218, 4);
			if (input.LA(1)=='F'||input.LA(1)=='f')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(218, 13);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(218, 22);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(218, 31);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(218, 40);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FALSE", 28);
			LeaveRule("FALSE", 28);
			LeaveRule_FALSE();
		}
	}
	// $ANTLR end "FALSE"

	partial void EnterRule_NULL();
	partial void LeaveRule_NULL();

	// $ANTLR start "NULL"
	[GrammarRule("NULL")]
	private void mNULL()
	{
		EnterRule_NULL();
		EnterRule("NULL", 29);
		TraceIn("NULL", 29);
		try
		{
			int _type = NULL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:222:2: ( ( 'N' | 'n' ) ( 'U' | 'u' ) ( 'L' | 'l' ) ( 'L' | 'l' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:222:4: ( 'N' | 'n' ) ( 'U' | 'u' ) ( 'L' | 'l' ) ( 'L' | 'l' )
			{
			DebugLocation(222, 4);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(222, 13);
			if (input.LA(1)=='U'||input.LA(1)=='u')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(222, 22);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(222, 31);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NULL", 29);
			LeaveRule("NULL", 29);
			LeaveRule_NULL();
		}
	}
	// $ANTLR end "NULL"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 30);
		TraceIn("DOT", 30);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:226:2: ()
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:227:2: 
			{
			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 30);
			LeaveRule("DOT", 30);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_CHARACTER_LITERAL();
	partial void LeaveRule_CHARACTER_LITERAL();

	// $ANTLR start "CHARACTER_LITERAL"
	[GrammarRule("CHARACTER_LITERAL")]
	private void mCHARACTER_LITERAL()
	{
		EnterRule_CHARACTER_LITERAL();
		EnterRule("CHARACTER_LITERAL", 31);
		TraceIn("CHARACTER_LITERAL", 31);
		try
		{
			int _type = CHARACTER_LITERAL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:230:2: ( '\\'' (~ ( '\\\\' | '\\'' ) | EscapeSequence ) '\\'' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:230:4: '\\'' (~ ( '\\\\' | '\\'' ) | EscapeSequence ) '\\''
			{
			DebugLocation(230, 4);
			Match('\''); 
			DebugLocation(230, 9);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:230:9: (~ ( '\\\\' | '\\'' ) | EscapeSequence )
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if (((LA1_1>='\u0000' && LA1_1<='&')||(LA1_1>='(' && LA1_1<='[')||(LA1_1>=']' && LA1_1<='\uFFFF')))
			{
				alt1 = 1;
			}
			else if ((LA1_1=='\\'))
			{
				alt1 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:230:11: ~ ( '\\\\' | '\\'' )
				{
				DebugLocation(230, 11);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:230:26: EscapeSequence
				{
				DebugLocation(230, 26);
				mEscapeSequence(); 

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(230, 43);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHARACTER_LITERAL", 31);
			LeaveRule("CHARACTER_LITERAL", 31);
			LeaveRule_CHARACTER_LITERAL();
		}
	}
	// $ANTLR end "CHARACTER_LITERAL"

	partial void EnterRule_TIMESPAN_LITERAL();
	partial void LeaveRule_TIMESPAN_LITERAL();

	// $ANTLR start "TIMESPAN_LITERAL"
	[GrammarRule("TIMESPAN_LITERAL")]
	private void mTIMESPAN_LITERAL()
	{
		EnterRule_TIMESPAN_LITERAL();
		EnterRule("TIMESPAN_LITERAL", 32);
		TraceIn("TIMESPAN_LITERAL", 32);
		try
		{
			int _type = TIMESPAN_LITERAL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:234:2: ( '#' '#' (~ '#' )* '#' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:234:4: '#' '#' (~ '#' )* '#'
			{
			DebugLocation(234, 4);
			Match('#'); 
			DebugLocation(234, 8);
			Match('#'); 
			DebugLocation(234, 12);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:234:12: (~ '#' )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if (((LA2_1>='\u0000' && LA2_1<='\"')||(LA2_1>='$' && LA2_1<='\uFFFF')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:
					{
					DebugLocation(234, 12);
					input.Consume();


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(234, 22);
			Match('#'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TIMESPAN_LITERAL", 32);
			LeaveRule("TIMESPAN_LITERAL", 32);
			LeaveRule_TIMESPAN_LITERAL();
		}
	}
	// $ANTLR end "TIMESPAN_LITERAL"

	partial void EnterRule_DATETIME_LITERAL();
	partial void LeaveRule_DATETIME_LITERAL();

	// $ANTLR start "DATETIME_LITERAL"
	[GrammarRule("DATETIME_LITERAL")]
	private void mDATETIME_LITERAL()
	{
		EnterRule_DATETIME_LITERAL();
		EnterRule("DATETIME_LITERAL", 33);
		TraceIn("DATETIME_LITERAL", 33);
		try
		{
			int _type = DATETIME_LITERAL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:238:2: ( '#' (~ '#' )* '#' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:238:4: '#' (~ '#' )* '#'
			{
			DebugLocation(238, 4);
			Match('#'); 
			DebugLocation(238, 8);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:238:8: (~ '#' )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if (((LA3_1>='\u0000' && LA3_1<='\"')||(LA3_1>='$' && LA3_1<='\uFFFF')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:
					{
					DebugLocation(238, 8);
					input.Consume();


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(238, 18);
			Match('#'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DATETIME_LITERAL", 33);
			LeaveRule("DATETIME_LITERAL", 33);
			LeaveRule_DATETIME_LITERAL();
		}
	}
	// $ANTLR end "DATETIME_LITERAL"

	partial void EnterRule_STRING_LITERAL();
	partial void LeaveRule_STRING_LITERAL();

	// $ANTLR start "STRING_LITERAL"
	[GrammarRule("STRING_LITERAL")]
	private void mSTRING_LITERAL()
	{
		EnterRule_STRING_LITERAL();
		EnterRule("STRING_LITERAL", 34);
		TraceIn("STRING_LITERAL", 34);
		try
		{
			int _type = STRING_LITERAL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:242:2: ( '\"' (~ ( '\\\\' | '\"' ) | EscapeSequence )* '\"' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:242:5: '\"' (~ ( '\\\\' | '\"' ) | EscapeSequence )* '\"'
			{
			DebugLocation(242, 5);
			Match('\"'); 
			DebugLocation(242, 9);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:242:9: (~ ( '\\\\' | '\"' ) | EscapeSequence )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=3;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if (((LA4_1>='\u0000' && LA4_1<='!')||(LA4_1>='#' && LA4_1<='[')||(LA4_1>=']' && LA4_1<='\uFFFF')))
				{
					alt4 = 1;
				}
				else if ((LA4_1=='\\'))
				{
					alt4 = 2;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:242:11: ~ ( '\\\\' | '\"' )
					{
					DebugLocation(242, 11);
					input.Consume();


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:242:25: EscapeSequence
					{
					DebugLocation(242, 25);
					mEscapeSequence(); 

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(242, 43);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING_LITERAL", 34);
			LeaveRule("STRING_LITERAL", 34);
			LeaveRule_STRING_LITERAL();
		}
	}
	// $ANTLR end "STRING_LITERAL"

	partial void EnterRule_HEX_LITERAL();
	partial void LeaveRule_HEX_LITERAL();

	// $ANTLR start "HEX_LITERAL"
	[GrammarRule("HEX_LITERAL")]
	private void mHEX_LITERAL()
	{
		EnterRule_HEX_LITERAL();
		EnterRule("HEX_LITERAL", 35);
		TraceIn("HEX_LITERAL", 35);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:248:2: ()
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:249:2: 
			{
			}

		}
		finally
		{
			TraceOut("HEX_LITERAL", 35);
			LeaveRule("HEX_LITERAL", 35);
			LeaveRule_HEX_LITERAL();
		}
	}
	// $ANTLR end "HEX_LITERAL"

	partial void EnterRule_DECIMAL_LITERAL();
	partial void LeaveRule_DECIMAL_LITERAL();

	// $ANTLR start "DECIMAL_LITERAL"
	[GrammarRule("DECIMAL_LITERAL")]
	private void mDECIMAL_LITERAL()
	{
		EnterRule_DECIMAL_LITERAL();
		EnterRule("DECIMAL_LITERAL", 36);
		TraceIn("DECIMAL_LITERAL", 36);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:253:2: ()
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:254:2: 
			{
			}

		}
		finally
		{
			TraceOut("DECIMAL_LITERAL", 36);
			LeaveRule("DECIMAL_LITERAL", 36);
			LeaveRule_DECIMAL_LITERAL();
		}
	}
	// $ANTLR end "DECIMAL_LITERAL"

	partial void EnterRule_HexDigit();
	partial void LeaveRule_HexDigit();

	// $ANTLR start "HexDigit"
	[GrammarRule("HexDigit")]
	private void mHexDigit()
	{
		EnterRule_HexDigit();
		EnterRule("HexDigit", 37);
		TraceIn("HexDigit", 37);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:257:10: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:
			{
			DebugLocation(257, 10);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HexDigit", 37);
			LeaveRule("HexDigit", 37);
			LeaveRule_HexDigit();
		}
	}
	// $ANTLR end "HexDigit"

	partial void EnterRule_FLOATING_POINT_LITERAL();
	partial void LeaveRule_FLOATING_POINT_LITERAL();

	// $ANTLR start "FLOATING_POINT_LITERAL"
	[GrammarRule("FLOATING_POINT_LITERAL")]
	private void mFLOATING_POINT_LITERAL()
	{
		EnterRule_FLOATING_POINT_LITERAL();
		EnterRule("FLOATING_POINT_LITERAL", 38);
		TraceIn("FLOATING_POINT_LITERAL", 38);
		try
		{
			int _type = FLOATING_POINT_LITERAL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:259:2: ( ( '0' )+ ( ( 'x' | 'X' ) ( ( '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' )+ ) |{...}? => '.' Digits ( Exponent )? ( FloatTypeSuffix )? | ( NumericTypeSuffix )? ) | ( '1' .. '9' ) ( Digits )? ({...}? => '.' ( Digits )? ( Exponent )? ( FloatTypeSuffix )? | Exponent ( FloatTypeSuffix )? | ( NumericTypeSuffix )? ) | '.' ( Digits ( Exponent )? ( FloatTypeSuffix )? |) )
			int alt21=3;
			try { DebugEnterDecision(21, false);
			switch (input.LA(1))
			{
			case '0':
				{
				alt21 = 1;
				}
				break;
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				{
				alt21 = 2;
				}
				break;
			case '.':
				{
				alt21 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:260:3: ( '0' )+ ( ( 'x' | 'X' ) ( ( '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' )+ ) |{...}? => '.' Digits ( Exponent )? ( FloatTypeSuffix )? | ( NumericTypeSuffix )? )
				{
				DebugLocation(260, 3);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:260:3: ( '0' )+
				int cnt5=0;
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_1 = input.LA(1);

					if ((LA5_1=='0'))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:260:3: '0'
						{
						DebugLocation(260, 3);
						Match('0'); 

						}
						break;

					default:
						if (cnt5 >= 1)
							goto loop5;

						EarlyExitException eee5 = new EarlyExitException( 5, input );
						DebugRecognitionException(eee5);
						throw eee5;
					}
					cnt5++;
				}
				loop5:
					;

				} finally { DebugExitSubRule(5); }

				DebugLocation(261, 3);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:261:3: ( ( 'x' | 'X' ) ( ( '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' )+ ) |{...}? => '.' Digits ( Exponent )? ( FloatTypeSuffix )? | ( NumericTypeSuffix )? )
				int alt10=3;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1=='X'||LA10_1=='x'))
				{
					alt10 = 1;
				}
				else if ((LA10_1=='.') && (( char.IsDigit((char)input.LA(2)) )))
				{
					alt10 = 2;
				}
				else
				{
					alt10 = 3;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:262:4: ( 'x' | 'X' ) ( ( '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' )+ )
					{
					DebugLocation(262, 4);
					input.Consume();

					DebugLocation(262, 14);
					 _type = HEX_LITERAL; 
					DebugLocation(263, 4);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:263:4: ( ( '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' )+ )
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:264:5: ( '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' )+
					{
					DebugLocation(264, 5);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:264:5: ( '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' )+
					int cnt6=0;
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_1 = input.LA(1);

						if (((LA6_1>='0' && LA6_1<='9')||(LA6_1>='A' && LA6_1<='Z')||(LA6_1>='a' && LA6_1<='z')))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch (alt6)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:
							{
							DebugLocation(264, 5);
							input.Consume();


							}
							break;

						default:
							if (cnt6 >= 1)
								goto loop6;

							EarlyExitException eee6 = new EarlyExitException( 6, input );
							DebugRecognitionException(eee6);
							throw eee6;
						}
						cnt6++;
					}
					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(265, 5);
					 Text = Text.Substring(2); 

					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:267:6: {...}? => '.' Digits ( Exponent )? ( FloatTypeSuffix )?
					{
					DebugLocation(267, 6);
					if (!(( char.IsDigit((char)input.LA(2)) )))
					{
						throw new FailedPredicateException(input, "FLOATING_POINT_LITERAL", " char.IsDigit((char)input.LA(2)) ");
					}
					DebugLocation(267, 46);
					Match('.'); 
					DebugLocation(267, 50);
					mDigits(); 
					DebugLocation(267, 57);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:267:57: ( Exponent )?
					int alt7=2;
					try { DebugEnterSubRule(7);
					try { DebugEnterDecision(7, false);
					int LA7_1 = input.LA(1);

					if ((LA7_1=='E'||LA7_1=='e'))
					{
						alt7 = 1;
					}
					} finally { DebugExitDecision(7); }
					switch (alt7)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:267:57: Exponent
						{
						DebugLocation(267, 57);
						mExponent(); 

						}
						break;

					}
					} finally { DebugExitSubRule(7); }

					DebugLocation(267, 67);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:267:67: ( FloatTypeSuffix )?
					int alt8=2;
					try { DebugEnterSubRule(8);
					try { DebugEnterDecision(8, false);
					int LA8_1 = input.LA(1);

					if ((LA8_1=='D'||LA8_1=='F'||LA8_1=='M'||LA8_1=='d'||LA8_1=='f'||LA8_1=='m'))
					{
						alt8 = 1;
					}
					} finally { DebugExitDecision(8); }
					switch (alt8)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:
						{
						DebugLocation(267, 67);
						input.Consume();


						}
						break;

					}
					} finally { DebugExitSubRule(8); }

					DebugLocation(267, 84);
					 _type = FLOATING_POINT_LITERAL; 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:268:6: ( NumericTypeSuffix )?
					{
					DebugLocation(268, 6);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:268:6: ( NumericTypeSuffix )?
					int alt9=2;
					try { DebugEnterSubRule(9);
					try { DebugEnterDecision(9, false);
					int LA9_1 = input.LA(1);

					if ((LA9_1=='D'||LA9_1=='F'||(LA9_1>='L' && LA9_1<='M')||LA9_1=='U'||LA9_1=='d'||LA9_1=='f'||(LA9_1>='l' && LA9_1<='m')||LA9_1=='u'))
					{
						alt9 = 1;
					}
					} finally { DebugExitDecision(9); }
					switch (alt9)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:268:6: NumericTypeSuffix
						{
						DebugLocation(268, 6);
						mNumericTypeSuffix(); 

						}
						break;

					}
					} finally { DebugExitSubRule(9); }

					DebugLocation(268, 25);
					 _type = DECIMAL_LITERAL; 

					}
					break;

				}
				} finally { DebugExitSubRule(10); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:270:4: ( '1' .. '9' ) ( Digits )? ({...}? => '.' ( Digits )? ( Exponent )? ( FloatTypeSuffix )? | Exponent ( FloatTypeSuffix )? | ( NumericTypeSuffix )? )
				{
				DebugLocation(270, 4);
				input.Consume();

				DebugLocation(270, 15);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:270:15: ( Digits )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if (((LA11_1>='0' && LA11_1<='9')))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:270:15: Digits
					{
					DebugLocation(270, 15);
					mDigits(); 

					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(271, 3);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:271:3: ({...}? => '.' ( Digits )? ( Exponent )? ( FloatTypeSuffix )? | Exponent ( FloatTypeSuffix )? | ( NumericTypeSuffix )? )
				int alt17=3;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if ((LA17_1=='.') && (( char.IsDigit((char)input.LA(2)) )))
				{
					alt17 = 1;
				}
				else if ((LA17_1=='E'||LA17_1=='e'))
				{
					alt17 = 2;
				}
				else
				{
					alt17 = 3;
				}
				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:271:5: {...}? => '.' ( Digits )? ( Exponent )? ( FloatTypeSuffix )?
					{
					DebugLocation(271, 5);
					if (!(( char.IsDigit((char)input.LA(2)) )))
					{
						throw new FailedPredicateException(input, "FLOATING_POINT_LITERAL", " char.IsDigit((char)input.LA(2)) ");
					}
					DebugLocation(271, 45);
					Match('.'); 
					DebugLocation(271, 49);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:271:49: ( Digits )?
					int alt12=2;
					try { DebugEnterSubRule(12);
					try { DebugEnterDecision(12, false);
					int LA12_1 = input.LA(1);

					if (((LA12_1>='0' && LA12_1<='9')))
					{
						alt12 = 1;
					}
					} finally { DebugExitDecision(12); }
					switch (alt12)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:271:49: Digits
						{
						DebugLocation(271, 49);
						mDigits(); 

						}
						break;

					}
					} finally { DebugExitSubRule(12); }

					DebugLocation(271, 57);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:271:57: ( Exponent )?
					int alt13=2;
					try { DebugEnterSubRule(13);
					try { DebugEnterDecision(13, false);
					int LA13_1 = input.LA(1);

					if ((LA13_1=='E'||LA13_1=='e'))
					{
						alt13 = 1;
					}
					} finally { DebugExitDecision(13); }
					switch (alt13)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:271:57: Exponent
						{
						DebugLocation(271, 57);
						mExponent(); 

						}
						break;

					}
					} finally { DebugExitSubRule(13); }

					DebugLocation(271, 67);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:271:67: ( FloatTypeSuffix )?
					int alt14=2;
					try { DebugEnterSubRule(14);
					try { DebugEnterDecision(14, false);
					int LA14_1 = input.LA(1);

					if ((LA14_1=='D'||LA14_1=='F'||LA14_1=='M'||LA14_1=='d'||LA14_1=='f'||LA14_1=='m'))
					{
						alt14 = 1;
					}
					} finally { DebugExitDecision(14); }
					switch (alt14)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:
						{
						DebugLocation(271, 67);
						input.Consume();


						}
						break;

					}
					} finally { DebugExitSubRule(14); }

					DebugLocation(271, 84);
					 _type = FLOATING_POINT_LITERAL; 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:272:5: Exponent ( FloatTypeSuffix )?
					{
					DebugLocation(272, 5);
					mExponent(); 
					DebugLocation(272, 14);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:272:14: ( FloatTypeSuffix )?
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_1 = input.LA(1);

					if ((LA15_1=='D'||LA15_1=='F'||LA15_1=='M'||LA15_1=='d'||LA15_1=='f'||LA15_1=='m'))
					{
						alt15 = 1;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:
						{
						DebugLocation(272, 14);
						input.Consume();


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(272, 31);
					 _type = FLOATING_POINT_LITERAL; 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:273:5: ( NumericTypeSuffix )?
					{
					DebugLocation(273, 5);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:273:5: ( NumericTypeSuffix )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_1 = input.LA(1);

					if ((LA16_1=='D'||LA16_1=='F'||(LA16_1>='L' && LA16_1<='M')||LA16_1=='U'||LA16_1=='d'||LA16_1=='f'||(LA16_1>='l' && LA16_1<='m')||LA16_1=='u'))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:273:5: NumericTypeSuffix
						{
						DebugLocation(273, 5);
						mNumericTypeSuffix(); 

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(273, 24);
					 _type = DECIMAL_LITERAL; 

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:276:3: '.' ( Digits ( Exponent )? ( FloatTypeSuffix )? |)
				{
				DebugLocation(276, 3);
				Match('.'); 
				DebugLocation(277, 3);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:277:3: ( Digits ( Exponent )? ( FloatTypeSuffix )? |)
				int alt20=2;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if (((LA20_1>='0' && LA20_1<='9')))
				{
					alt20 = 1;
				}
				else
				{
					alt20 = 2;
				}
				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:277:5: Digits ( Exponent )? ( FloatTypeSuffix )?
					{
					DebugLocation(277, 5);
					mDigits(); 
					DebugLocation(277, 12);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:277:12: ( Exponent )?
					int alt18=2;
					try { DebugEnterSubRule(18);
					try { DebugEnterDecision(18, false);
					int LA18_1 = input.LA(1);

					if ((LA18_1=='E'||LA18_1=='e'))
					{
						alt18 = 1;
					}
					} finally { DebugExitDecision(18); }
					switch (alt18)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:277:12: Exponent
						{
						DebugLocation(277, 12);
						mExponent(); 

						}
						break;

					}
					} finally { DebugExitSubRule(18); }

					DebugLocation(277, 22);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:277:22: ( FloatTypeSuffix )?
					int alt19=2;
					try { DebugEnterSubRule(19);
					try { DebugEnterDecision(19, false);
					int LA19_1 = input.LA(1);

					if ((LA19_1=='D'||LA19_1=='F'||LA19_1=='M'||LA19_1=='d'||LA19_1=='f'||LA19_1=='m'))
					{
						alt19 = 1;
					}
					} finally { DebugExitDecision(19); }
					switch (alt19)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:
						{
						DebugLocation(277, 22);
						input.Consume();


						}
						break;

					}
					} finally { DebugExitSubRule(19); }

					DebugLocation(277, 39);
					 _type = FLOATING_POINT_LITERAL; 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:278:5: 
					{
					DebugLocation(278, 5);
					 _type = DOT; 

					}
					break;

				}
				} finally { DebugExitSubRule(20); }


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOATING_POINT_LITERAL", 38);
			LeaveRule("FLOATING_POINT_LITERAL", 38);
			LeaveRule_FLOATING_POINT_LITERAL();
		}
	}
	// $ANTLR end "FLOATING_POINT_LITERAL"

	partial void EnterRule_Digits();
	partial void LeaveRule_Digits();

	// $ANTLR start "Digits"
	[GrammarRule("Digits")]
	private void mDigits()
	{
		EnterRule_Digits();
		EnterRule("Digits", 39);
		TraceIn("Digits", 39);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:286:2: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:286:6: ( '0' .. '9' )+
			{
			DebugLocation(286, 6);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:286:6: ( '0' .. '9' )+
			int cnt22=0;
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_1 = input.LA(1);

				if (((LA22_1>='0' && LA22_1<='9')))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:
					{
					DebugLocation(286, 6);
					input.Consume();


					}
					break;

				default:
					if (cnt22 >= 1)
						goto loop22;

					EarlyExitException eee22 = new EarlyExitException( 22, input );
					DebugRecognitionException(eee22);
					throw eee22;
				}
				cnt22++;
			}
			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}

		}
		finally
		{
			TraceOut("Digits", 39);
			LeaveRule("Digits", 39);
			LeaveRule_Digits();
		}
	}
	// $ANTLR end "Digits"

	partial void EnterRule_Exponent();
	partial void LeaveRule_Exponent();

	// $ANTLR start "Exponent"
	[GrammarRule("Exponent")]
	private void mExponent()
	{
		EnterRule_Exponent();
		EnterRule("Exponent", 40);
		TraceIn("Exponent", 40);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:291:2: ( ( 'e' | 'E' ) ( '+' | '-' )? ( Digits |) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:291:6: ( 'e' | 'E' ) ( '+' | '-' )? ( Digits |)
			{
			DebugLocation(291, 6);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(291, 16);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:291:16: ( '+' | '-' )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1=='+'||LA23_1=='-'))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:
				{
				DebugLocation(291, 16);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(292, 3);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:292:3: ( Digits |)
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if (((LA24_1>='0' && LA24_1<='9')))
			{
				alt24 = 1;
			}
			else
			{
				alt24 = 2;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:292:5: Digits
				{
				DebugLocation(292, 5);
				mDigits(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:294:4: 
				{
				DebugLocation(294, 4);

								EmitErrorMessage("Malformed exponent");
								Text = "0.0";
							

				}
				break;

			}
			} finally { DebugExitSubRule(24); }


			}

		}
		finally
		{
			TraceOut("Exponent", 40);
			LeaveRule("Exponent", 40);
			LeaveRule_Exponent();
		}
	}
	// $ANTLR end "Exponent"

	partial void EnterRule_NumericTypeSuffix();
	partial void LeaveRule_NumericTypeSuffix();

	// $ANTLR start "NumericTypeSuffix"
	[GrammarRule("NumericTypeSuffix")]
	private void mNumericTypeSuffix()
	{
		EnterRule_NumericTypeSuffix();
		EnterRule("NumericTypeSuffix", 41);
		TraceIn("NumericTypeSuffix", 41);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:303:2: ( ( 'u' | 'U' ) ( 'l' | 'L' )? | ( 'l' | 'L' ) ( 'u' | 'U' )? | FloatTypeSuffix )
			int alt27=3;
			try { DebugEnterDecision(27, false);
			switch (input.LA(1))
			{
			case 'U':
			case 'u':
				{
				alt27 = 1;
				}
				break;
			case 'L':
			case 'l':
				{
				alt27 = 2;
				}
				break;
			case 'D':
			case 'F':
			case 'M':
			case 'd':
			case 'f':
			case 'm':
				{
				alt27 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 27, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:303:4: ( 'u' | 'U' ) ( 'l' | 'L' )?
				{
				DebugLocation(303, 4);
				input.Consume();

				DebugLocation(303, 16);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:303:16: ( 'l' | 'L' )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1=='L'||LA25_1=='l'))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:
					{
					DebugLocation(303, 16);
					input.Consume();


					}
					break;

				}
				} finally { DebugExitSubRule(25); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:304:4: ( 'l' | 'L' ) ( 'u' | 'U' )?
				{
				DebugLocation(304, 4);
				input.Consume();

				DebugLocation(304, 16);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:304:16: ( 'u' | 'U' )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, false);
				int LA26_1 = input.LA(1);

				if ((LA26_1=='U'||LA26_1=='u'))
				{
					alt26 = 1;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:
					{
					DebugLocation(304, 16);
					input.Consume();


					}
					break;

				}
				} finally { DebugExitSubRule(26); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:305:4: FloatTypeSuffix
				{
				DebugLocation(305, 4);
				mFloatTypeSuffix(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("NumericTypeSuffix", 41);
			LeaveRule("NumericTypeSuffix", 41);
			LeaveRule_NumericTypeSuffix();
		}
	}
	// $ANTLR end "NumericTypeSuffix"

	partial void EnterRule_FloatTypeSuffix();
	partial void LeaveRule_FloatTypeSuffix();

	// $ANTLR start "FloatTypeSuffix"
	[GrammarRule("FloatTypeSuffix")]
	private void mFloatTypeSuffix()
	{
		EnterRule_FloatTypeSuffix();
		EnterRule("FloatTypeSuffix", 42);
		TraceIn("FloatTypeSuffix", 42);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:310:2: ( ( 'f' | 'F' | 'd' | 'D' | 'm' | 'M' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:
			{
			DebugLocation(310, 2);
			if (input.LA(1)=='D'||input.LA(1)=='F'||input.LA(1)=='M'||input.LA(1)=='d'||input.LA(1)=='f'||input.LA(1)=='m')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("FloatTypeSuffix", 42);
			LeaveRule("FloatTypeSuffix", 42);
			LeaveRule_FloatTypeSuffix();
		}
	}
	// $ANTLR end "FloatTypeSuffix"

	partial void EnterRule_EscapeSequence();
	partial void LeaveRule_EscapeSequence();

	// $ANTLR start "EscapeSequence"
	[GrammarRule("EscapeSequence")]
	private void mEscapeSequence()
	{
		EnterRule_EscapeSequence();
		EnterRule("EscapeSequence", 43);
		TraceIn("EscapeSequence", 43);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:315:2: ( '\\\\' ( 'B' | 'b' | 'T' | 't' | 'N' | 'n' | 'F' | 'f' | 'R' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UnicodeEscape )
			int alt28=2;
			try { DebugEnterDecision(28, false);
			int LA28_1 = input.LA(1);

			if ((LA28_1=='\\'))
			{
				int LA28_2 = input.LA(2);

				if ((LA28_2=='\"'||LA28_2=='\''||LA28_2=='B'||LA28_2=='F'||LA28_2=='N'||LA28_2=='R'||LA28_2=='T'||LA28_2=='\\'||LA28_2=='b'||LA28_2=='f'||LA28_2=='n'||LA28_2=='r'||LA28_2=='t'))
				{
					alt28 = 1;
				}
				else if ((LA28_2=='U'||LA28_2=='u'))
				{
					alt28 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 28, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 28, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:315:4: '\\\\' ( 'B' | 'b' | 'T' | 't' | 'N' | 'n' | 'F' | 'f' | 'R' | 'r' | '\\\"' | '\\'' | '\\\\' )
				{
				DebugLocation(315, 4);
				Match('\\'); 
				DebugLocation(315, 9);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:316:4: UnicodeEscape
				{
				DebugLocation(316, 4);
				mUnicodeEscape(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("EscapeSequence", 43);
			LeaveRule("EscapeSequence", 43);
			LeaveRule_EscapeSequence();
		}
	}
	// $ANTLR end "EscapeSequence"

	partial void EnterRule_UnicodeEscape();
	partial void LeaveRule_UnicodeEscape();

	// $ANTLR start "UnicodeEscape"
	[GrammarRule("UnicodeEscape")]
	private void mUnicodeEscape()
	{
		EnterRule_UnicodeEscape();
		EnterRule("UnicodeEscape", 44);
		TraceIn("UnicodeEscape", 44);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:321:2: ( '\\\\' ( 'u' | 'U' ) HexDigit HexDigit HexDigit HexDigit )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:321:4: '\\\\' ( 'u' | 'U' ) HexDigit HexDigit HexDigit HexDigit
			{
			DebugLocation(321, 4);
			Match('\\'); 
			DebugLocation(321, 9);
			if (input.LA(1)=='U'||input.LA(1)=='u')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(321, 19);
			mHexDigit(); 
			DebugLocation(321, 28);
			mHexDigit(); 
			DebugLocation(321, 37);
			mHexDigit(); 
			DebugLocation(321, 46);
			mHexDigit(); 

			}

		}
		finally
		{
			TraceOut("UnicodeEscape", 44);
			LeaveRule("UnicodeEscape", 44);
			LeaveRule_UnicodeEscape();
		}
	}
	// $ANTLR end "UnicodeEscape"

	partial void EnterRule_IDENTIFIER();
	partial void LeaveRule_IDENTIFIER();

	// $ANTLR start "IDENTIFIER"
	[GrammarRule("IDENTIFIER")]
	private void mIDENTIFIER()
	{
		EnterRule_IDENTIFIER();
		EnterRule("IDENTIFIER", 45);
		TraceIn("IDENTIFIER", 45);
		try
		{
			int _type = IDENTIFIER;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:324:2: ( LETTER ( LETTER | '0' .. '9' )* )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:324:4: LETTER ( LETTER | '0' .. '9' )*
			{
			DebugLocation(324, 4);
			mLETTER(); 
			DebugLocation(324, 11);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:324:11: ( LETTER | '0' .. '9' )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_1 = input.LA(1);

				if (((LA29_1>='0' && LA29_1<='9')||(LA29_1>='A' && LA29_1<='Z')||LA29_1=='_'||(LA29_1>='a' && LA29_1<='z')))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:
					{
					DebugLocation(324, 11);
					input.Consume();


					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENTIFIER", 45);
			LeaveRule("IDENTIFIER", 45);
			LeaveRule_IDENTIFIER();
		}
	}
	// $ANTLR end "IDENTIFIER"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 46);
		TraceIn("LETTER", 46);
		try
		{
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:330:2: ( 'A' .. 'Z' | 'a' .. 'z' | '_' )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:
			{
			DebugLocation(330, 2);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LETTER", 46);
			LeaveRule("LETTER", 46);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 47);
		TraceIn("WS", 47);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:335:2: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:335:4: ( ' ' | '\\t' | '\\r' | '\\n' )+
			{
			DebugLocation(335, 4);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:335:4: ( ' ' | '\\t' | '\\r' | '\\n' )+
			int cnt30=0;
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if (((LA30_1>='\t' && LA30_1<='\n')||LA30_1=='\r'||LA30_1==' '))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:
					{
					DebugLocation(335, 4);
					input.Consume();


					}
					break;

				default:
					if (cnt30 >= 1)
						goto loop30;

					EarlyExitException eee30 = new EarlyExitException( 30, input );
					DebugRecognitionException(eee30);
					throw eee30;
				}
				cnt30++;
			}
			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(336, 2);

			// This construct is to make ANTLRWorks happy.
			#if true
					Skip();
			#else
					_channel = HIDDEN;
			#endif
				

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 47);
			LeaveRule("WS", 47);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	public override void mTokens()
	{
		// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:8: ( T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | AND | IN | OR | XOR | CAST | IF | NOT | TRUE | FALSE | NULL | DOT | CHARACTER_LITERAL | TIMESPAN_LITERAL | DATETIME_LITERAL | STRING_LITERAL | FLOATING_POINT_LITERAL | IDENTIFIER | WS )
		int alt31=37;
		try { DebugEnterDecision(31, false);
		try
		{
			alt31 = dfa31.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(31); }
		switch (alt31)
		{
		case 1:
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:10: T__32
			{
			DebugLocation(1, 10);
			mT__32(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:16: T__33
			{
			DebugLocation(1, 16);
			mT__33(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:22: T__34
			{
			DebugLocation(1, 22);
			mT__34(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:28: T__35
			{
			DebugLocation(1, 28);
			mT__35(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:34: T__36
			{
			DebugLocation(1, 34);
			mT__36(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:40: T__37
			{
			DebugLocation(1, 40);
			mT__37(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:46: T__38
			{
			DebugLocation(1, 46);
			mT__38(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:52: T__39
			{
			DebugLocation(1, 52);
			mT__39(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:58: T__40
			{
			DebugLocation(1, 58);
			mT__40(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:64: T__41
			{
			DebugLocation(1, 64);
			mT__41(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:70: T__42
			{
			DebugLocation(1, 70);
			mT__42(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:76: T__43
			{
			DebugLocation(1, 76);
			mT__43(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:82: T__44
			{
			DebugLocation(1, 82);
			mT__44(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:88: T__45
			{
			DebugLocation(1, 88);
			mT__45(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:94: T__46
			{
			DebugLocation(1, 94);
			mT__46(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:100: T__47
			{
			DebugLocation(1, 100);
			mT__47(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:106: T__48
			{
			DebugLocation(1, 106);
			mT__48(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:112: T__49
			{
			DebugLocation(1, 112);
			mT__49(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:118: T__50
			{
			DebugLocation(1, 118);
			mT__50(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:124: AND
			{
			DebugLocation(1, 124);
			mAND(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:128: IN
			{
			DebugLocation(1, 128);
			mIN(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:131: OR
			{
			DebugLocation(1, 131);
			mOR(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:134: XOR
			{
			DebugLocation(1, 134);
			mXOR(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:138: CAST
			{
			DebugLocation(1, 138);
			mCAST(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:143: IF
			{
			DebugLocation(1, 143);
			mIF(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:146: NOT
			{
			DebugLocation(1, 146);
			mNOT(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:150: TRUE
			{
			DebugLocation(1, 150);
			mTRUE(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:155: FALSE
			{
			DebugLocation(1, 155);
			mFALSE(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:161: NULL
			{
			DebugLocation(1, 161);
			mNULL(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:166: DOT
			{
			DebugLocation(1, 166);
			mDOT(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:170: CHARACTER_LITERAL
			{
			DebugLocation(1, 170);
			mCHARACTER_LITERAL(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:188: TIMESPAN_LITERAL
			{
			DebugLocation(1, 188);
			mTIMESPAN_LITERAL(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:205: DATETIME_LITERAL
			{
			DebugLocation(1, 205);
			mDATETIME_LITERAL(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:222: STRING_LITERAL
			{
			DebugLocation(1, 222);
			mSTRING_LITERAL(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:237: FLOATING_POINT_LITERAL
			{
			DebugLocation(1, 237);
			mFLOATING_POINT_LITERAL(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:260: IDENTIFIER
			{
			DebugLocation(1, 260);
			mIDENTIFIER(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// C:\\Users\\Alexandr\\Sources\\Repos\\Expressions\\Expressions\\Flee\\Flee.g:1:271: WS
			{
			DebugLocation(1, 271);
			mWS(); 

			}
			break;

		}

	}


	#region DFA
	DFA31 dfa31;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa31 = new DFA31(this, SpecialStateTransition31);
	}

	private class DFA31 : DFA
	{
		private const string DFA31_eotS =
			"\x1\x17\x8\xFFFF\x1\x21\x1\xFFFF\x1\x24\x3\xFFFF\x8\x1C\xE\xFFFF\x1\x1C"+
			"\x1\x32\x1\x33\x1\x34\x6\x1C\x1\x30\x1\xFFFF\x1\x3C\x3\xFFFF\x1\x3D\x1"+
			"\x1C\x1\x3F\x3\x1C\x3\xFFFF\x1\x43\x1\xFFFF\x1\x44\x1\x45\x1\x1C\x3\xFFFF"+
			"\x1\x47\x1\xFFFF";
		private const string DFA31_eofS =
			"\x48\xFFFF";
		private const string DFA31_minS =
			"\x1\x9\x8\xFFFF\x1\x3C\x1\xFFFF\x1\x3D\x3\xFFFF\x1\x4E\x1\x46\x1\x52"+
			"\x1\x4F\x1\x41\x1\x4F\x1\x52\x1\x41\x2\xFFFF\x1\x0\xB\xFFFF\x1\x44\x3"+
			"\x30\x1\x52\x1\x53\x1\x54\x1\x4C\x1\x55\x1\x4C\x1\x0\x1\xFFFF\x1\x30"+
			"\x3\xFFFF\x1\x30\x1\x54\x1\x30\x1\x4C\x1\x45\x1\x53\x3\xFFFF\x1\x30\x1"+
			"\xFFFF\x2\x30\x1\x45\x3\xFFFF\x1\x30\x1\xFFFF";
		private const string DFA31_maxS =
			"\x1\x7A\x8\xFFFF\x1\x3E\x1\xFFFF\x1\x3E\x3\xFFFF\x2\x6E\x1\x72\x1\x6F"+
			"\x1\x61\x1\x75\x1\x72\x1\x61\x2\xFFFF\x1\xFFFF\xB\xFFFF\x1\x64\x3\x7A"+
			"\x1\x72\x1\x73\x1\x74\x1\x6C\x1\x75\x1\x6C\x1\xFFFF\x1\xFFFF\x1\x7A\x3"+
			"\xFFFF\x1\x7A\x1\x74\x1\x7A\x1\x6C\x1\x65\x1\x73\x3\xFFFF\x1\x7A\x1\xFFFF"+
			"\x2\x7A\x1\x65\x3\xFFFF\x1\x7A\x1\xFFFF";
		private const string DFA31_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\xFFFF\x1"+
			"\xD\x1\xFFFF\x1\x11\x1\x12\x1\x13\x8\xFFFF\x1\x1E\x1\x1F\x1\xFFFF\x1"+
			"\x22\x1\x23\x1\x24\x1\x25\x1\xA\x1\xB\x1\xC\x1\x9\x1\xF\x1\x10\x1\xE"+
			"\xB\xFFFF\x1\x21\x1\xFFFF\x1\x15\x1\x19\x1\x16\x6\xFFFF\x1\x20\x1\x14"+
			"\x1\x17\x1\xFFFF\x1\x1A\x3\xFFFF\x1\x18\x1\x1D\x1\x1B\x1\xFFFF\x1\x1C";
		private const string DFA31_specialS =
			"\x19\xFFFF\x1\x0\x15\xFFFF\x1\x1\x18\xFFFF}>";
		private static readonly string[] DFA31_transitionS =
			{
				"\x2\x1D\x2\xFFFF\x1\x1D\x12\xFFFF\x1\x1D\x1\xFFFF\x1\x1A\x1\x19\x1\xFFFF"+
				"\x1\x1\x1\xFFFF\x1\x18\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x1B\x1"+
				"\x8\xA\x1B\x2\xFFFF\x1\x9\x1\xA\x1\xB\x2\xFFFF\x1\xF\x1\x1C\x1\x13\x2"+
				"\x1C\x1\x16\x2\x1C\x1\x10\x4\x1C\x1\x14\x1\x11\x4\x1C\x1\x15\x3\x1C"+
				"\x1\x12\x2\x1C\x1\xC\x1\xFFFF\x1\xD\x1\xE\x1\x1C\x1\xFFFF\x1\xF\x1\x1C"+
				"\x1\x13\x2\x1C\x1\x16\x2\x1C\x1\x10\x4\x1C\x1\x14\x1\x11\x4\x1C\x1\x15"+
				"\x3\x1C\x1\x12\x2\x1C",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x1E\x1\x1F\x1\x20",
				"",
				"\x1\x22\x1\x23",
				"",
				"",
				"",
				"\x1\x25\x1F\xFFFF\x1\x25",
				"\x1\x27\x7\xFFFF\x1\x26\x17\xFFFF\x1\x27\x7\xFFFF\x1\x26",
				"\x1\x28\x1F\xFFFF\x1\x28",
				"\x1\x29\x1F\xFFFF\x1\x29",
				"\x1\x2A\x1F\xFFFF\x1\x2A",
				"\x1\x2B\x5\xFFFF\x1\x2C\x19\xFFFF\x1\x2B\x5\xFFFF\x1\x2C",
				"\x1\x2D\x1F\xFFFF\x1\x2D",
				"\x1\x2E\x1F\xFFFF\x1\x2E",
				"",
				"",
				"\x23\x30\x1\x2F\xFFDC\x30",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x31\x1F\xFFFF\x1\x31",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\x1\x35\x1F\xFFFF\x1\x35",
				"\x1\x36\x1F\xFFFF\x1\x36",
				"\x1\x37\x1F\xFFFF\x1\x37",
				"\x1\x38\x1F\xFFFF\x1\x38",
				"\x1\x39\x1F\xFFFF\x1\x39",
				"\x1\x3A\x1F\xFFFF\x1\x3A",
				"\x0\x3B",
				"",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"",
				"",
				"",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\x1\x3E\x1F\xFFFF\x1\x3E",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\x1\x40\x1F\xFFFF\x1\x40",
				"\x1\x41\x1F\xFFFF\x1\x41",
				"\x1\x42\x1F\xFFFF\x1\x42",
				"",
				"",
				"",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\x1\x46\x1F\xFFFF\x1\x46",
				"",
				"",
				"",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				""
			};

		private static readonly short[] DFA31_eot = DFA.UnpackEncodedString(DFA31_eotS);
		private static readonly short[] DFA31_eof = DFA.UnpackEncodedString(DFA31_eofS);
		private static readonly char[] DFA31_min = DFA.UnpackEncodedStringToUnsignedChars(DFA31_minS);
		private static readonly char[] DFA31_max = DFA.UnpackEncodedStringToUnsignedChars(DFA31_maxS);
		private static readonly short[] DFA31_accept = DFA.UnpackEncodedString(DFA31_acceptS);
		private static readonly short[] DFA31_special = DFA.UnpackEncodedString(DFA31_specialS);
		private static readonly short[][] DFA31_transition;

		static DFA31()
		{
			int numStates = DFA31_transitionS.Length;
			DFA31_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA31_transition[i] = DFA.UnpackEncodedString(DFA31_transitionS[i]);
			}
		}

		public DFA31( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 31;
			this.eot = DFA31_eot;
			this.eof = DFA31_eof;
			this.min = DFA31_min;
			this.max = DFA31_max;
			this.accept = DFA31_accept;
			this.special = DFA31_special;
			this.transition = DFA31_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | AND | IN | OR | XOR | CAST | IF | NOT | TRUE | FALSE | NULL | DOT | CHARACTER_LITERAL | TIMESPAN_LITERAL | DATETIME_LITERAL | STRING_LITERAL | FLOATING_POINT_LITERAL | IDENTIFIER | WS );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition31(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		s = -1;
		int LA31_1 = input.LA(1);
		int index31_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				if ((LA31_1=='#')) {s = 47;}

				else if (((LA31_1>='\u0000' && LA31_1<='\"')||(LA31_1>='$' && LA31_1<='\uFFFF'))) {s = 48;}

				break;
			}
		case 1:
			{
				if (((LA31_1>='\u0000' && LA31_1<='\uFFFF'))) {s = 59;}

				else s = 48;

				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		NoViableAltException nvae = new NoViableAltException(dfa.Description, 31, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
 
	#endregion

}

} // namespace  Expressions.Flee 
